import flixel.addons.transition.FlxTransitionableState;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.data.song.SongRegistry;
import funkin.data.story.level.LevelRegistry;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.save.Save;
import funkin.ui.story.Level;
import funkin.ui.story.StoryMenuState;
import funkin.ui.transition.LoadingState;
import funkin.util.assets.DataAssets;
import funkin.util.Constants;
import funkin.util.SortUtil;
import funkin.util.tools.ArrayTools;
import openfl.utils.Assets;
import StringTools;

/**
 * In order for this to work properly,
 * the base level's script needs to use
 * the template on docs/templates/LevelScriptTemplate.hxc
 */
class StoryDiffs extends Module {

    function new() {
        super('story-diffs', 3);
        if (StoryMenuState.rememberedLevelId != null) {
            this.lastRememberedLevelId = StoryMenuState.rememberedLevelId;
        }
    }

    // YOU SHOULD NOT MODIFY THE FOLLOWING VALUES DIRECTLY!!!
    // You are only allowed to read from them if you really need to,
    // and you should remember that arrays get passed by reference,
    // so if you assign an array to another variable, you will need
    // to use the .copy() method to avoid modifying the original + if
    // the array is nested, you will need to use the .map() method to
    // copy the nested arrays as well.

    var ENTERED:String = "UD_STORY_ENTER";
    var SCROLLED:String = "UD_STORY_SCROLL";
    var CONFIRMED:String = "UD_STORY_CONFIRM";
    var EXITED:String = "UD_STORY_EXIT";

    var storyMenu:StoryMenuState = null;
    var justEnteredStoryMenu:Bool = false;
    var lastRememberedDifficulty:String = StoryMenuState.rememberedDifficulty;
    var lastDifficultyList:Array<String> = Constants.DEFAULT_DIFFICULTY_LIST_FULL;
    var lastRememberedLevelId:String = Constants.DEFAULT_SONG;// "tutorial"

    public override function onStateChangeEnd(event:StateChangeScriptEvent):Void {
        // trace('called onStateChangeEnd');
        super.onStateChangeEnd(event);
        if (Std.isOfType(event.targetState, StoryMenuState)) {
            this.storyMenu = event.targetState;
            this.justEnteredStoryMenu = true;
            this.storyMenu.persistentUpdate = true;
            // trace('StoryDiffs ON');
            // trace(this.lastRememberedDifficulty);
            // trace(this.lastDifficultyList);
        } else if (this.storyMenu != null) {
            this.storyMenu = null;
            // trace('StoryDiffs OFF');
            // trace(this.lastRememberedDifficulty);
            // trace(this.lastDifficultyList);
        }
    }

    // fix for song instrumentals always being the default for story mode
    public override function onSongLoaded(event:SongLoadScriptEvent):Void {
        super.onSongLoaded(event);

        if (PlayState.instance == null) {return;}

        PlayState.instance.currentInstrumental = PlayState.instance.
            currentSong.getDifficulty(PlayState.instance.currentDifficulty,
            PlayState.instance.currentVariation).characters.instrumental;
    }

    function dispatchEvent(event:ScriptEvent):Void {
        trace('[story-diffs]  -  Dispatching event ('+event.type+')');
        ModuleHandler.callEvent(event);
    }

    /**
     * Get the list of songs in this level, as an array of IDs.
     * @return Array<String>
     */
    function getSongsFR(level:Level, difficulty:String):Array<String> {
        // gets the songs normally
        var songs = level.getSongs();
        if (songs == null) {return null;}
        // filter out songs that don't have
        // the provided difficulty
        return songs.filter(
            function(songId:String) {
                // if the song doesn't have the  
                // current difficulty, filter it out.
                var song = SongRegistry.instance.fetchEntry(songId);
                return song.getDifficulty(difficulty, null, song.variations) != null;
            }
        );

        // using this method, we can display
        // the maximum amount of songs possible
        // in the story menu state, while also making
        // PlayState not load songs that don't have
        // the current difficulty, which would have
        // caused an error which could have taken us
        // back to the main menu.
    }

    /**
     * The list of difficulties the player can select from for this level.
     * @return The difficulty IDs.
     */
    function getDifficultiesFR(level:Level, difficulties:Array<String> = []):Array<String> {
        // calibrates the difficulties array
        while (difficulties.length > 0) {
            difficulties.pop();
        }
        // declare the song variable
        var song = null;
        // iterate through the songs
        // included in the level
        for (songId in level.getSongs()) {
            // fetch the song object from the registry
            song = SongRegistry.instance.fetchEntry(songId);
            // if it doesn't exist,
            // continue to the next song
            if (song == null) {continue;}

            // iterate through the
            // difficulties of the song
            // (non-hidden difficulties)
            for (diff in song.listDifficulties(null, song.variations, true, false)) {
                // push the difficulty to the
                // difficulties array if it's not
                // already there
                if (!difficulties.contains(diff)) {difficulties.push(diff);}
            }
        }
        // sort the difficulties array
        difficulties.sort(this.sortingStoryDiffs);
        // return the final 
        // sorted difficulties array
        return difficulties;

        // Using this method, we can display
        // the maximum amount of difficulties
        // available in the level in the story
        // menu state. getSongs will filter out
        // the songs that don't have the current
        // difficulty, so we don't have to worry
        // about that here.
    }

    /**
     * uses the default difficulty list to sort the difficulties
     * (this list gets modified by the variation injector in order
     * to implement the difficulty "rating" system, which sorts the
     * difficulties according to their "playData.ratings" numbers)
     * @param a a member of the sorted array
     * @param b another member of the sorted array
     * @return Int
     */
    function sortingStoryDiffs(a:String, b:String):Int {
        // Hscript doesn't want to use bind, so I made this...
        return SortUtil.defaultsThenAlphabetically(Constants.DEFAULT_DIFFICULTY_LIST, a, b);
    }

    /**
     * Get the list of songs in this level, as an array of names, for display on the menu.
     * @param difficulty The difficulty of the level being displayed
     * @return The display names of the songs in this level
     */
    function getSongDisplayNamesFR(level:Level, difficulty:String, ?displayNames:Array<String>):Array<String> {
        if (displayNames == null) {
            displayNames = level.getSongDisplayNames(difficulty);
        }
        var songList:Array<String> = level.getSongs();
        if (songList == null) {return displayNames;}
        var songNameList:Array<String> = songList.map(function(songId:String) {
            return Level.getSongDisplayName(songId, difficulty);
        });
        return displayNames.map(function(songName:String) {
            if (songName == 'Unknown') {return songName;}
            var index = songNameList.indexOf(songName);
            if (index != -1) {
                var song = SongRegistry.instance.fetchEntry(songList[index]);
                var vari = song.getFirstValidVariation(difficulty);
                if (vari == null) {return '';}
                return song._metadata.get(vari).songName;
            }
            return songName;
        }).filter(function(songName:String) {
            return songName != '';
        });
    }

    function updateTextFR():Void {
        if (this.storyMenu == null) {return;}
        this.storyMenu.tracklistText.text = 'TRACKS\n\n';
        this.storyMenu.tracklistText.text += this.getSongDisplayNamesFR(this.storyMenu.currentLevel,
            this.storyMenu.currentDifficultyId).join('\n');

        this.storyMenu.tracklistText.screenCenter(0x01);
        this.storyMenu.tracklistText.x -= FlxG.width * 0.35;

        var levelScore = Save.instance.getLevelScore(this.storyMenu.currentLevelId,
            this.storyMenu.currentDifficultyId);
        if (levelScore == null) {
            this.storyMenu.highScore = 0;
            return;
        }
        this.storyMenu.highScore = levelScore.score;
    }

    public override function onUpdate(event:UpdateScriptEvent):Void {
        if (this.storyMenu == null) {return;}
        overrideCreationCall();
        if (!this.storyMenu.exitingMenu) {
            if (!this.storyMenu.selectedLevel) {
                boundDifficulty();
                forceDifficultyChange();
                determineArrowVisibility();
                determineScrollBehavior();
                if (this.storyMenu.controls.ACCEPT) {
                    this.dispatchEvent(new ScriptEvent(this.CONFIRMED));
                }
            } else {
                var tmr = FlxTimer.globalManager._timers[FlxTimer.globalManager._timers.length-1];
                tmr.onComplete = function() {
                    FlxTransitionableState.skipNextTransIn = false;
                    FlxTransitionableState.skipNextTransOut = false;

                    PlayStatePlaylist.playlistSongIds = this.getSongsFR(
                        LevelRegistry.instance.fetchEntry(PlayStatePlaylist.campaignId),
                        PlayStatePlaylist.campaignDifficulty
                    );

                    var targetSong = SongRegistry.instance.fetchEntry(PlayStatePlaylist.playlistSongIds.shift());

                    var targetVariation:String = targetSong.getFirstValidVariation(PlayStatePlaylist.campaignDifficulty);

                    LoadingState.loadPlayState({
                        targetSong: targetSong,
                        targetDifficulty: PlayStatePlaylist.campaignDifficulty,
                        targetVariation: targetVariation
                    }, true);
                };
                this.dispatchEvent(new ScriptEvent(this.CONFIRMED));
                this.storyMenu = null;
            }
        } else {
            this.dispatchEvent(new ScriptEvent(this.EXITED));
            this.storyMenu = null;
        }
    }

    function overrideCreationCall():Void {
        if (!this.justEnteredStoryMenu) {return;}
        this.storyMenu.currentDifficultyId = this.lastRememberedDifficulty;
        StoryMenuState.rememberedDifficulty = this.storyMenu.currentDifficultyId;
        determineArrowVisibility();
        this.storyMenu.buildDifficultySprite();
        this.storyMenu.funnyMusicThing();
        this.updateTextFR();
        this.storyMenu.refresh();
        this.dispatchEvent(new ScriptEvent(this.ENTERED));
        this.justEnteredStoryMenu = false;
    }

    function boundDifficulty():Void {
        if (this.storyMenu ==  null) {return;}

        var curDifficultyList = this.getDifficultiesFR(this.storyMenu.currentLevel);
        if (ArrayTools.isEqualUnordered(curDifficultyList, this.lastDifficultyList)) {return;}
        trace(curDifficultyList);

        var newIndex:Int = curDifficultyList.indexOf(this.lastRememberedDifficulty);
        if (newIndex == -1) {
            newIndex = this.lastDifficultyList.indexOf(this.lastRememberedDifficulty);
            if (newIndex == -1) {newIndex = 0;}
            newIndex = (newIndex / (this.lastDifficultyList.length-1)) * (curDifficultyList.length-1);
        }

        this.lastDifficultyList = curDifficultyList;
        this.storyMenu.currentDifficultyId = this.lastDifficultyList[newIndex];
        StoryMenuState.rememberedDifficulty = this.storyMenu.currentDifficultyId;
        this.lastRememberedDifficulty = StoryMenuState.rememberedDifficulty;
        // trace("difficulty bound successful");
    }

    function forceDifficultyChange():Void {
        if (this.storyMenu ==  null) {return;}

        var change:Int = 0;
        if (this.storyMenu.controls.UI_RIGHT_P) {change++;}
        if (this.storyMenu.controls.UI_LEFT_P) {change--;}
        if (change == 0) {return;}

        var currentIndex:Int = this.lastDifficultyList.indexOf(this.lastRememberedDifficulty) + change;

        // Wrap around
        if (currentIndex < 0) {currentIndex = this.lastDifficultyList.length - 1;}
        if (currentIndex >= this.lastDifficultyList.length) {currentIndex = 0;}

        this.storyMenu.currentDifficultyId = this.lastDifficultyList[currentIndex];
        StoryMenuState.rememberedDifficulty = this.storyMenu.currentDifficultyId;
        this.lastRememberedDifficulty = StoryMenuState.rememberedDifficulty;
        // trace("forced difficulty change successful");
    }

    function determineArrowVisibility():Void {
        if (this.storyMenu ==  null) {return;}
        if (this.lastDifficultyList.length <= 1) {
            this.storyMenu.leftDifficultyArrow.visible = false;
            this.storyMenu.rightDifficultyArrow.visible = false;
            return;
        }
        this.storyMenu.leftDifficultyArrow.visible = true;
        this.storyMenu.rightDifficultyArrow.visible = true;
    }

    // PLEASE DON'T MODIFY THESE VARIABLES!!!
    var prvData:Dynamic = null;
    var prvColor:Int = 0x0;

    function determineScrollBehavior():Void {
        if (this.storyMenu ==  null) {return;}
        if (this.storyMenu.controls.UI_RIGHT_P ||
            this.storyMenu.controls.UI_LEFT_P ||
            this.storyMenu.controls.UI_UP_P ||
            this.storyMenu.controls.UI_DOWN_P)
        {
            this.storyMenu.buildDifficultySprite();
            FunkinSound.stopAllAudio(false);
            FunkinSound.playOnce(Paths.sound('scrollMenu'), 0.4);
            this.storyMenu.funnyMusicThing();

            this.prvData = this.storyMenu.currentLevel._data;
            this.prvColor = this.storyMenu.currentLevel.getBackgroundColor();
            if (this.lastRememberedLevelId != this.storyMenu.currentLevelId) {
                var prvLevel:Level = LevelRegistry.instance.fetchEntry(this.lastRememberedLevelId);
                prvData = prvLevel._data;
                prvColor = prvLevel.getBackgroundColor();
            }

            ModuleHandler.getModule("alt-level-data")
                .scriptCall("replaceData", [this.storyMenu.currentLevel,
                    this.storyMenu.currentDifficultyId+this.storyMenu.currentLevelId]);
            this.forceUpdateBackground();

            if (prvData != this.storyMenu.currentLevel._data) {
                this.storyMenu.updateProps();
                this.storyMenu.currentLevelTitle.title.loadGraphic(
                    Paths.image(this.storyMenu.currentLevel._data.titleAsset)
                );
            }
            this.updateTextFR();
            this.storyMenu.refresh();
            trace('difficulty sprite rebuild successful \n(difficultyId: "'+this.lastRememberedDifficulty+'")');
            this.lastRememberedLevelId = this.storyMenu.currentLevelId;
            
            this.dispatchEvent(new ScriptEvent(this.SCROLLED));
        }
    }

    function forceUpdateBackground():Void {
        if (this.storyMenu ==  null) {return;}
        // use a custom Background transition, which is
        // the same, but for switching between difficulties
        var newColor:Int = this.storyMenu.currentLevel.getBackgroundColor();

        if (this.prvData.background.charAt(0) == '#' && this.storyMenu.currentLevel._data.background.charAt(0) == '#') {
            if (this.prvColor != newColor) {
                // Both the previous and current level were simple backgrounds.
                // Fade between colors directly, rather than fading one background out and another in.
                // cancels potential tween in progress, and tweens from there
                FlxTween.cancelTweensOf(this.storyMenu.levelBackground);
                FlxTween.color(this.storyMenu.levelBackground, 0.9, this.storyMenu.levelBackground.color,
                    newColor, {ease: FlxEase.quartOut});
            } else {
                // Both the previous and current level were simple backgrounds.
                // No need to fade between colors, just update the color, because
                // the previous call to updateBackground() from the source code
                // might relay on data that changed already (in short, it's a bug fix)
                FlxTween.cancelTweensOf(this.storyMenu.levelBackground);
                this.storyMenu.levelBackground.color = newColor;
            }
        } else {
            // Either the previous or current level has a complex background.
            // We need to fade the old background out and the new one in.

            // Reference the old background and fade it out.
            var oldBackground:FlxSprite = this.storyMenu.levelBackground;
            FlxTween.tween(oldBackground, {alpha: 0.0}, 0.6, {
                ease: FlxEase.linear,
                onComplete: function(_) {
                    this.storyMenu.remove(oldBackground);
                }
            });

            // Build a new background and fade it in.
            this.storyMenu.levelBackground = this.storyMenu.currentLevel.buildBackground();
            this.storyMenu.levelBackground.x = 0;
            this.storyMenu.levelBackground.y = 56;
            this.storyMenu.levelBackground.alpha = 0.0; // Hidden to start.
            this.storyMenu.levelBackground.zIndex = 100;
            this.storyMenu.add(levelBackground);

            FlxTween.tween(this.storyMenu.levelBackground, {alpha: 1.0}, 0.6, {
                ease: FlxEase.linear
            });
        }
    }

    /**
     * Handle difficulty changes from pause menu when in story mode
     */
    public override function onSongRetry(event:ScriptEvent):Void {
        super.onSongRetry(event);

        if (!PlayStatePlaylist.isStoryMode ||
            PlayState.instance.currentDifficulty == this.lastRememberedDifficulty)
        {return;}
        
        this.lastRememberedDifficulty = PlayState.instance.currentDifficulty;
        
        if (PlayStatePlaylist.playlistSongIds.length < 1) {return;}

        PlayStatePlaylist.playlistSongIds = this.getSongsFR(LevelRegistry.instance.fetchEntry(this.lastRememberedLevelId),
            PlayState.instance.currentDifficulty);
        PlayStatePlaylist.playlistSongIds.splice(0,PlayStatePlaylist.
            playlistSongIds.indexOf(PlayState.instance.currentSong.id));
    }
}