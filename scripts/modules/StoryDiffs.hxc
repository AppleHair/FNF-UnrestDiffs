import flixel.addons.transition.FlxTransitionableState;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.data.song.SongRegistry;
import funkin.data.story.level.LevelRegistry;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.save.Save;
import funkin.ui.story.Level;
import funkin.ui.story.StoryMenuState;
import funkin.ui.transition.LoadingState;
import funkin.util.assets.DataAssets;
import funkin.util.Constants;
import funkin.util.SortUtil;
import funkin.util.tools.ArrayTools;
import openfl.utils.Assets;
import StringTools;

/**
 * This module is responsible for handling the
 * story mode difficulty selection. It is the first
 * module that was made for this framework, when I was
 * still just trying to make the story mode difficulty
 * selection better. I added a lot of features to it
 * and it became a very big module. I'll need to figure
 * out how to split it into smaller modules, but for now,
 * it's just a big module that handles the story mode stuff
 * (except for alt level data, which I did manage to split
 * into a separate module).
 */
class StoryDiffs extends Module {

    function new() {
        super('story-diffs', 3);
        if (StoryMenuState.rememberedLevelId != null) {
            this.lastRememberedLevelId = StoryMenuState.rememberedLevelId;
        }
    }

    // YOU SHOULD NOT MODIFY THE FOLLOWING VALUES DIRECTLY!!!
    // You are only allowed to read from them if you really need to,
    // and you should remember that arrays get passed by reference,
    // so if you assign an array to another variable, you will need
    // to use the .copy() method to avoid modifying the original + if
    // the array is nested, you will need to use the .map() method to
    // copy the nested arrays as well.

    // event types for story mode
    var ENTERED:String = "UD_STORY_ENTER";
    var SCROLLED:String = "UD_STORY_SCROLL";
    var CONFIRMED:String = "UD_STORY_CONFIRM";
    var EXITED:String = "UD_STORY_EXIT";

    /**
     * Dispatches an event to the module handler.
     */
    function dispatchEvent(event:ScriptEvent):Void {
        trace('[story-diffs]  -  Dispatching event ('+event.type+')');
        ModuleHandler.callEvent(event);
    }

    /**
     * Whenever the story mode menu state is opened,
     * it's instance is stored here so we can access it.
     */
    var storyMenu:StoryMenuState = null;
    /**
     * This boolean gets set to true right after
     * the story mode menu state is opened and then
     * gets set back to false at the end of onUpdate.
     */
    var justEnteredStoryMenu:Bool = false;
    /**
     * The last remembered difficulty on the story mode
     * menu. Handled separately from StoryMenuState's
     * rememberedDifficulty attribute and used for
     * overriding default difficulty change behavior.
     */
    var lastRememberedDifficulty:String = StoryMenuState.rememberedDifficulty;
    /**
     * The last remembered bounding difficulty list on
     * the story mode menu. Also Used for overriding
     * default difficulty change behavior.
     */
    var lastDifficultyList:Array<String> = Constants.DEFAULT_DIFFICULTY_LIST_FULL;
    /**
     * The last remembered level on the story mode
     * menu. Gets set to the value of StoryMenuState's
     * rememberedLevelId attribute when the module loads,
     * but is handled separately from it afterwards.
     */
    var lastRememberedLevelId:String = "tutorial";
    /**
     * Gets set by boundDifficulty and forceDifficultyChange
     * to determine if the difficulty was changed on the current
     * frame. Gets set back to false by determineScrollBehavior.
     */
    var difficultyChanged = false;

    /**
     * Fix for song instrumentals always being the default on story mode
     */
    public override function onSongLoaded(event:SongLoadScriptEvent):Void {
        super.onSongLoaded(event);

        if (PlayState.instance == null) {return;}
        if (!PlayStatePlaylist.isStoryMode) {return;}

        PlayState.instance.currentInstrumental = PlayState.instance.
            currentSong.getDifficulty(PlayState.instance.currentDifficulty,
            PlayState.instance.currentVariation).characters.instrumental;
    }

    /**
     * Handles difficulty changes from pause menu when in story mode.
     * Makes sure that when playing on story mode, the last remembered
     * difficulty in the story mode menu will match the difficulty which
     * was switched to from the pause menu and the song playlist won't
     * have songs which don't have the difficulty which was switched to
     * from the pause menu.
     */
     public override function onSongRetry(event:ScriptEvent):Void {
        super.onSongRetry(event);

        if (!PlayStatePlaylist.isStoryMode ||
            PlayState.instance.currentDifficulty == this.lastRememberedDifficulty)
        {return;}
        
        this.lastRememberedDifficulty = PlayState.instance.currentDifficulty;
        
        if (PlayStatePlaylist.playlistSongIds.length < 1) {return;}

        PlayStatePlaylist.playlistSongIds = this.getSongsFiltered(LevelRegistry.instance.fetchEntry(this.lastRememberedLevelId),
            PlayState.instance.currentDifficulty);
        PlayStatePlaylist.playlistSongIds.splice(0,PlayStatePlaylist.
            playlistSongIds.indexOf(PlayState.instance.currentSong.id));
    }

    /**
     * Get a filtered list of all the songs in the level that have the current difficulty.
     * @param level The level to get the songs from.
     * @param difficulty The difficulty to filter the songs by.
     * @return The filtered list of song IDs.
     */
    function getSongsFiltered(level:Level, difficulty:String):Array<String> {
        // Gets the songs normally
        var songs = level.getSongs();
        if (songs == null) {return null;}
        // Filter out songs that don't have
        // the provided difficulty
        return songs.filter(
            function(songId:String) {
                // If the song doesn't have the  
                // current difficulty, filter it out.
                var song = SongRegistry.instance.fetchEntry(songId);
                return song.getDifficulty(difficulty, null, song.variations) != null;
            }
        );

        // Using this method, we can display
        // the maximum amount of songs possible
        // in the story menu state, while also making
        // PlayState not load songs that don't have
        // the current difficulty, which would have
        // caused an error which could have taken us
        // back to the main menu.
    }

    /**
     * Generates the full list of difficulties available in the level.
     * This function will merge all the difficulties from all the songs
     * and won't filter out any difficulties.
     * @param level The level to get the difficulties from.
     * @param difficulties The array to store the difficulties in. (optional)
     * @return The difficulty IDs array.
     */
    function getDifficultiesFull(level:Level, difficulties:Array<String> = []):Array<String> {
        // Calibrates the difficulties array
        while (difficulties.length > 0) {
            difficulties.pop();
        }
        // Declare the song variable
        var song = null;
        // Iterate through the songs
        // included in the level
        for (songId in level.getSongs()) {
            // Fetch the song object from the registry
            song = SongRegistry.instance.fetchEntry(songId);
            // If it doesn't exist,
            // continue to the next song
            if (song == null) {continue;}

            // Iterate through the
            // difficulties of the song
            // (non-hidden difficulties)
            for (diff in song.listDifficulties(null, song.variations, true, false)) {
                // Push the difficulty to the
                // difficulties array if it's not
                // already there
                if (!difficulties.contains(diff)) {difficulties.push(diff);}
            }
        }
        // Sort the difficulties array
        difficulties.sort(this.sortingStoryDiffs);
        // Return the final 
        // sorted difficulties array
        return difficulties;

        // Using this method, we can display
        // the maximum amount of difficulties
        // available in the level in the story
        // menu state. getSongs will filter out
        // the songs that don't have the current
        // difficulty, so we don't have to worry
        // about that here.
    }

    /**
     * uses the default difficulty list to sort the difficulties
     * (this list gets modified by the difficulty definer in order
     * to implement the difficulty sorting system).
     * Intended to be used with the sort() method.
     * @param a a member of the sorted array
     * @param b another member of the sorted array
     * @return Int
     */
    function sortingStoryDiffs(a:String, b:String):Int {
        // Hscript doesn't want to use bind, so I made this...
        return SortUtil.defaultsThenAlphabetically(Constants.DEFAULT_DIFFICULTY_LIST, a, b);
    }

    /**
     * Get a list of the display names of the songs in the level,
     * but make sure that the display names are taken from the
     * variation metadata that fits the current difficulty.
     * @param level The level to get the songs from
     * @param difficulty The difficulty of the level being displayed
     * @param displayNames The default display name list of the level. (optional)
     * @return The display names of the songs in this level
     */
    function getSongVariDisplayNames(level:Level, difficulty:String, ?displayNames:Array<String>):Array<String> {
        // If the display names array is null, get
        // the default display name list of the level.
        if (displayNames == null) {
            displayNames = level.getSongDisplayNames(difficulty);
        }
        // Get the song list from the level
        var songList:Array<String> = level.getSongs();
        if (songList == null) {return displayNames;}
        // Get the default song display name list from the song list
        var songNameList:Array<String> = songList.map(function(songId:String) {
            return Level.getSongDisplayName(songId, difficulty);
        });
        // Make the final song display name list and return it.
        return displayNames.map(function(songName:String) {
            // Check if the current song name is
            // the default display name of a song
            // from the level's song list
            var index = songNameList.indexOf(songName);
            if (index != -1) {
                // Get the matching song ID and try to fetch the song
                var song = SongRegistry.instance.fetchEntry(songList[index]);
                if (song == null) {return 'Unknown';}
                // Get the first variation of the song
                // which is associated with the provided difficulty.
                var vari = song.getFirstValidVariation(difficulty, song.variations);
                // If null is returned, the song doesn't have
                // the provided difficulty, and should be removed
                // from the list.
                if (vari == null) {return '';}
                // Get the song display name from the variation's metadata
                return song._metadata.get(vari).songName;
            }
            // Leave the display name unchanged
            return songName;
        }).filter(function(songName:String) {
            // Remove empty string song names
            return songName != '';
        });
    }

    /**
     * Same as StoryMenuState's updateText, but it uses getSongVariDisplayNames instead.
     */
    function updateTextAgain():Void {
        if (this.storyMenu == null) {return;}
        this.storyMenu.tracklistText.text = 'TRACKS\n\n';
        this.storyMenu.tracklistText.text += this.getSongVariDisplayNames(this.storyMenu.currentLevel,
            this.storyMenu.currentDifficultyId).join('\n');

        this.storyMenu.tracklistText.screenCenter(0x01);
        this.storyMenu.tracklistText.x -= FlxG.width * 0.35;

        var levelScore = Save.instance.getLevelScore(this.storyMenu.currentLevelId,
            this.storyMenu.currentDifficultyId);
        if (levelScore == null) {
            this.storyMenu.highScore = 0;
            return;
        }
        this.storyMenu.highScore = levelScore.score;
    }

    public override function onStateChangeEnd(event:StateChangeScriptEvent):Void {
        super.onStateChangeEnd(event);
        if (Std.isOfType(event.targetState, StoryMenuState)) {
            this.storyMenu = event.targetState;
            this.justEnteredStoryMenu = true;
            this.storyMenu.persistentUpdate = true;
            return;
        }
        this.storyMenu = null;
    }

    public override function onUpdate(event:UpdateScriptEvent):Void {
        if (this.storyMenu == null) {return;}
        // Reset the current difficulty ID to
        // the remembered one from this module
        // after entering the story mode menu.
        rememberDifficultyId();
    
        if (!this.storyMenu.exitingMenu) {
            if (!this.storyMenu.selectedLevel) {
                // Handle switching between two different
                // difficulty lists and change the selected
                // difficulty if necessary.
                boundDifficulty();
                // Override the default difficulty change behavior
                // with an unrestricted one, and handle it separately.
                forceDifficultyChange();
                // Makes sure the arrows are invisible when
                // only one difficulty can be selected.
                determineArrowVisibility();
                // Handle scrolling-related behaviors
                determineScrollBehavior(
                    this.storyMenu.currentLevel._data,
                    this.storyMenu.currentLevel.getBackgroundColor()
                );
                
                // When a level is locked, selectedLevel
                // will remain false, but the confirm event
                // will still be dispatched.
                if (this.storyMenu.controls.ACCEPT) {
                    // Dispatch the story mode menu confirm event
                    // for locked levels.
                    this.dispatchEvent(new ScriptEvent(this.CONFIRMED));
                }
            } else {
                // When a level is selected in the story mode menu,
                // a timer will be set to run a callback, which loads
                // the level, after a few seconds. Because no other timer
                // gets set afterwards, we can fetch the timer which loads
                // the level by searching for the last timer that was set
                // and then change its callback function to whatever we want.
                // In this case, we want to make sure that the song playlist
                // is filtered according to the selected difficulty and that
                // the first song in that list is the one to get loaded by
                // this callback.
                var tmr = FlxTimer.globalManager._timers[FlxTimer.globalManager._timers.length-1];
                tmr.onComplete = function() {
                    FlxTransitionableState.skipNextTransIn = false;
                    FlxTransitionableState.skipNextTransOut = false;

                    // Filter the song playlist according to the selected difficulty.
                    PlayStatePlaylist.playlistSongIds = this.getSongsFiltered(
                        LevelRegistry.instance.fetchEntry(PlayStatePlaylist.campaignId),
                        PlayStatePlaylist.campaignDifficulty
                    );

                    // Fetch the first song in the playlist,
                    // while removing it from the start of
                    // the playlist.
                    var targetSong = SongRegistry.instance.fetchEntry(PlayStatePlaylist.playlistSongIds.shift());
                    
                    // Get the target variation according to the selected difficulty.
                    var targetVariation:String = targetSong.getFirstValidVariation(PlayStatePlaylist.campaignDifficulty,
                        targetSong.variations);
                    
                    // Load PlayState with the first song in the level
                    LoadingState.loadPlayState({
                        targetSong: targetSong,
                        targetDifficulty: PlayStatePlaylist.campaignDifficulty,
                        targetVariation: targetVariation
                    }, true);
                };

                // Dispatch the story mode menu confirm event,
                // and then set storyMenu to null to stop the
                // module from updating.
                this.dispatchEvent(new ScriptEvent(this.CONFIRMED));
                this.storyMenu = null;
            }
        } else {
            // Dispatch the story mode menu exit event,
            // and then set storyMenu to null to stop the
            // module from updating.
            this.dispatchEvent(new ScriptEvent(this.EXITED));
            this.storyMenu = null;
        }

        // Reset justEnteredStoryMenu back to false
        this.justEnteredStoryMenu = false;
    }

    /**
     * Resets the current difficulty ID to
     * the remembered one from this module
     * after entering the story mode menu.
     */
    function rememberDifficultyId():Void {
        if (!this.justEnteredStoryMenu) {return;}
        this.storyMenu.currentDifficultyId = this.lastRememberedDifficulty;
        StoryMenuState.rememberedDifficulty = this.storyMenu.currentDifficultyId;
    }

    /**
     * Handles difficulty list change behavior and
     * changes the current difficulty if it doesn't
     * exist in the current difficulty list.
     */
    function boundDifficulty():Void {
        if (this.storyMenu ==  null) {return;}
        
        // Generate the current difficulty list
        // according to the current level and its
        // alt level data.
        var curDifficultyList = this.getDifficultiesFull(this.storyMenu.currentLevel).filter(
            function(diff:String):Bool {
                var altLevelDataModule = ModuleHandler.getModule("alt-level-data");
                if (altLevelDataModule.scriptGet("levelAltData")[0].indexOf(diff+this.storyMenu.currentLevel.id) == -1) {
                    // If the difficulty doesn't have alt level data for this level, it's visible by default.
                    return true;
                }
                // Check for the visibility of the difficulty in the alt level data.
                return altLevelDataModule.scriptGet("levelAltData")[1][
                    altLevelDataModule.scriptGet("levelAltData")[0].indexOf(diff+this.storyMenu.currentLevel.id)
                ].visible;
            }
        );
        
        // If the difficulty list is the same as the last one, nothing should be done.
        if (ArrayTools.isEqualUnordered(curDifficultyList, this.lastDifficultyList)) {return;}

        // Try to find the current difficulty in the current difficulty list.
        var newIndex:Int = curDifficultyList.indexOf(this.lastRememberedDifficulty);
        if (newIndex == -1) {
            // If the difficulty doesn't exist in the current difficulty list,
            // remap its index from the previous difficulty list's range to the
            // current difficulty list's range and use the remapped index to get
            // the new current difficulty.
            this.difficultyChanged = true;
            newIndex = this.lastDifficultyList.indexOf(this.lastRememberedDifficulty);
            if (newIndex == -1) {newIndex = 0;}
            if (this.lastDifficultyList.length > 1) {
                newIndex = (newIndex / (this.lastDifficultyList.length-1)) * (curDifficultyList.length-1);
            }
        }

        // Make the current difficulty list the last difficulty list.
        this.lastDifficultyList = curDifficultyList;
        // trace(this.lastDifficultyList);
        // Update the current difficulty accordingly.
        this.storyMenu.currentDifficultyId = this.lastDifficultyList[newIndex];
        // trace("bounding: "+this.storyMenu.currentDifficultyId);
        StoryMenuState.rememberedDifficulty = this.storyMenu.currentDifficultyId;
        this.lastRememberedDifficulty = StoryMenuState.rememberedDifficulty;
    }

    /**
     * Changes the difficulty according to the
     * left and right buttons and the current
     * difficulty list. Gets handled separately
     * from StoryMenuState's changeDifficulty
     * method and overrides it's restrictions.
     */
    function forceDifficultyChange():Void {
        if (this.storyMenu ==  null) {return;}

        // Calculate the difficulty change
        // according to the left and right buttons.
        var change:Int = 0;
        if (this.storyMenu.controls.UI_RIGHT_P) {change++;}
        if (this.storyMenu.controls.UI_LEFT_P) {change--;}
        // If the difficulty shouldn't be
        // changed, nothing should be done.
        if (change == 0) {return;}

        // Change the index of the current difficulty
        // in the difficulty list using the change value.
        var currentIndex:Int = this.lastDifficultyList.indexOf(this.lastRememberedDifficulty) + change;

        // Wrap the index around the difficulty list's bounds.
        if (currentIndex < 0) {currentIndex = this.lastDifficultyList.length - 1;}
        if (currentIndex >= this.lastDifficultyList.length) {currentIndex = 0;}
        
        // Check whether the difficulty actually changed in the end
        if (!this.difficultyChanged) {
            this.difficultyChanged = this.lastDifficultyList.indexOf(this.lastRememberedDifficulty) != currentIndex;
        }

        // Update the current difficulty accordingly.
        this.storyMenu.currentDifficultyId = this.lastDifficultyList[currentIndex];
        // trace("forcing: "+this.storyMenu.currentDifficultyId);
        StoryMenuState.rememberedDifficulty = this.storyMenu.currentDifficultyId;
        this.lastRememberedDifficulty = StoryMenuState.rememberedDifficulty;
    }

    /**
     * Makes sure the arrows are invisible when
     * only one difficulty can be selected and
     * makes the arrows visible otherwise.
     */
    function determineArrowVisibility():Void {
        if (this.storyMenu ==  null) {return;}
        if (this.lastDifficultyList.length <= 1) {
            this.storyMenu.leftDifficultyArrow.visible = false;
            this.storyMenu.rightDifficultyArrow.visible = false;
            return;
        }
        this.storyMenu.leftDifficultyArrow.visible = true;
        this.storyMenu.rightDifficultyArrow.visible = true;
    }

    /**
     * Handles scroll-related behaviors
     * and also handles alt level data replacment.
     * @param prvData The previous level data used by the current level
     * @param prvColor The previous background color used by the current level
     */
    function determineScrollBehavior(prvData:Dynamic, prvColor:Int):Void {
        if (this.storyMenu ==  null) {return;}
        // If the menu scrolled or we just entered the story mode menu.
        if (this.storyMenu.controls.UI_RIGHT_P ||
            this.storyMenu.controls.UI_LEFT_P ||
            this.storyMenu.controls.UI_UP_P ||
            this.storyMenu.controls.UI_DOWN_P ||
            FlxG.mouse.wheel != 0 ||
            this.justEnteredStoryMenu)
        {
            // Handle difficulty sprite behavior
            this.storyMenu.buildDifficultySprite();
            if (this.difficultyChanged || this.justEnteredStoryMenu) {
                this.storyMenu.funnyMusicThing();
                this.difficultyChanged = false;
            } else if (!this.difficultyChanged) {
                // buildDifficultySprite tweens difficultySprite's y position and alpha.
                // We cancel this tween by removing it from the global tween manager and
                // then setting the target properties to difficultySprite immediately.
                this.storyMenu.difficultySprite.y = FlxTween.globalManager._tweens.pop()._properties.y;
                this.storyMenu.difficultySprite.alpha = 1;
                // The scrollMenu sound will also play if the
                // levels were scrolled through, so we stop the sound
                // only if that's not the case.
                if (this.lastRememberedLevelId == this.storyMenu.currentLevelId) {
                    FunkinSound.stopAllAudio(false);
                }
            }

            // If the current level changed, the previous data
            // and color will be taken from the previous level.
            if (this.lastRememberedLevelId != this.storyMenu.currentLevelId) {
                var prvLevel:Level = LevelRegistry.instance.fetchEntry(this.lastRememberedLevelId);
                prvData = prvLevel._data;
                prvColor = prvLevel.getBackgroundColor();
            }

            // Try to replace the current level's data with alt level data.
            ModuleHandler.getModule("alt-level-data")
                .scriptCall("replaceData", [this.storyMenu.currentLevel,
                    this.storyMenu.currentDifficultyId+this.storyMenu.currentLevelId]);
            // Update the background in a way that also works with alt level data.
            this.forceUpdateBackground(prvData, prvColor);

            // Update props and reload title sprite only if the level data has changed
            if (prvData != this.storyMenu.currentLevel._data) {
                this.storyMenu.updateProps();
                this.storyMenu.currentLevelTitle.title.loadGraphic(
                    Paths.image(this.storyMenu.currentLevel._data.titleAsset)
                );
            }

            // Like StoryMenuState's updateText, but it also uses
            // song display names from variation metadata.
            this.updateTextAgain();
            this.storyMenu.refresh();

            this.lastRememberedLevelId = this.storyMenu.currentLevelId;
            
            // Dispatch the appropriate event.
            if (this.justEnteredStoryMenu) {
                this.dispatchEvent(new ScriptEvent(this.ENTERED));
                return;
            }
            this.dispatchEvent(new ScriptEvent(this.SCROLLED));
        }
    }

    /**
     * Works like StoryMenuState's updateBackground
     * method, but edited to work properly with alt
     * level data backgrounds.
     * @param prvData The previous level data used for the background
     * @param prvColor The previous background color
     */
    function forceUpdateBackground(prvData:Dynamic, prvColor:Int):Void {
        if (this.storyMenu ==  null) {return;}

        // Get the new color to transition into from the current level
        var newColor:Int = this.storyMenu.currentLevel.getBackgroundColor();

        if (prvData.background.charAt(0) == '#' && this.storyMenu.currentLevel._data.background.charAt(0) == '#') {
            if (prvColor != newColor) {
                // Both the previous and current level were simple backgrounds.
                // Fade between colors directly, rather than fading one background out and another in.
                // cancels potential tween in progress, and tweens from there
                FlxTween.cancelTweensOf(this.storyMenu.levelBackground);
                FlxTween.color(this.storyMenu.levelBackground, 0.9, this.storyMenu.levelBackground.color,
                    newColor, {ease: FlxEase.quartOut});
            } else {
                // Both the previous and current level were simple backgrounds.
                // No need to fade between colors, just update the color, because
                // the previous call to updateBackground() from the source code
                // might relay on data that changed already.
                FlxTween.cancelTweensOf(this.storyMenu.levelBackground);
                this.storyMenu.levelBackground.color = newColor;
            }
        } else {
            // Either the previous or current level has a complex background.
            // We need to fade the old background out and the new one in.

            // Reference the old background and fade it out.
            var oldBackground:FlxSprite = this.storyMenu.levelBackground;
            FlxTween.tween(oldBackground, {alpha: 0.0}, 0.6, {
                ease: FlxEase.linear,
                onComplete: function(_) {
                    this.storyMenu.remove(oldBackground);
                }
            });

            // Build a new background and fade it in.
            this.storyMenu.levelBackground = this.storyMenu.currentLevel.buildBackground();
            this.storyMenu.levelBackground.x = 0;
            this.storyMenu.levelBackground.y = 56;
            this.storyMenu.levelBackground.alpha = 0.0; // Hidden to start.
            this.storyMenu.levelBackground.zIndex = 100;
            this.storyMenu.add(levelBackground);

            FlxTween.tween(this.storyMenu.levelBackground, {alpha: 1.0}, 0.6, {
                ease: FlxEase.linear
            });
        }
    }
}