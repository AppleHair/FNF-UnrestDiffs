import Array;
import flixel.FlxG;
import funkin.data.song.SongRegistry;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.modding.PolymodErrorHandler;
import funkin.Paths;
import funkin.play.song.Song;
import funkin.util.assets.DataAssets;
import funkin.util.Constants;
import funkin.util.tools.ArrayTools;
import openfl.utils.Assets;
import String;
import StringTools;

/**
 * A module that allows you to inject variations
 * to existing songs using polymod's append logic.
 * 
 * For more information and instructions, check out
 * the [README.md](https://github.com/AppleHair/FNF-UnrestDiffs/blob/main/data/UD/vari-injections/README.md) file in "data/UD/vari-injections".
 */
class VariationInjector extends Module {

    function new() {
        super('vari-injector', 0);
    }


    /**
     * Will be set to true after all variation injections will be done.
     */
    var finishedSetup:Bool = false;

    /**
     * Tries to injects a new variation into the song.
     * @param variId the variation id to inject.
     * @param songId the song id to inject the variation to.
     */
    function injectVariationToSong(variId:String, songId:String):Void {
        var entry = SongRegistry.instance.fetchEntry(songId);
        if (entry == null) {return;}
        if (entry.variations.contains(variId)) {return;}

        // Fetch the requested variation's
        // metadata for the song
        var variMeta = entry.fetchVariationMetadata(songId, variId);
        // If it doesn't exist, the
        // variation injection failed.
        if (variMeta == null) {
            FlxG.log.warn('[vari-injector]  -  Failed to load variation metadata ('+songId+':'+variId+'), is the path correct?');
            return;
        }
        // Otherwise, add the new variation
        // metadata to the _metadata map.
        entry._metadata.set(variMeta.variation, variMeta);
        // trace('[vari-injector]  -  Successfully injected variation to song '+'('+variId+' => '+songId+')');
    }

    // Need this because Hscript has dementia
    var variIdSETUP:String;

    function setup(UDPaths:Module):Void {
        if (this.finishedSetup) {return;}

        // gets all the variation injection files.
        var variIdList:Array<String> = DataAssets.listDataFilesInPath(
            UDPaths.scriptCall("variationInjection"),'.txt'
        ).map(function(variInjectPath:String):String {
            return variInjectPath.split('/')[0];
        });
        // if a file is named "default.txt", it will be ignored.
        // You can't inject the default variation to a song,
        // because every song must have the default variation,
        // so you'll never need or be able to inject it.
        variIdList.remove("default");
        
        // For each variation injection file,
        // parse it and inject the variation to
        // each song that needs it.
        for (variId in variIdList) {
            var path:String = Paths.txt(UDPaths.scriptCall("variationInjection", [variId]));
            if (!Assets.exists(path)) {continue;}
            // REMEMBER varId
            variIdSETUP = variId;
            for (songId in Assets.getText(path).split("\n").map(function(e:String):String {return StringTools.trim(e);})) {
                if (songId == "") {continue;}
                if (StringTools.startsWith(songId, "//")) {continue;}
                this.injectVariationToSong(variIdSETUP, songId);
            }
        }

        trace("[vari-injector]  -  Finished injecting variations!");

        this.finishedSetup = true;
    }

    /**
     * Make the variation injections happen when
     * the game is loaded (before the title screen).
     */
    public override function onCreate(event:ScriptEvent):Void {
        super.onCreate();
        setup(ModuleHandler.getModule("ud-paths"));
    }

    /**
     * If needed, re-inject the variations when
     * the state changes (helps when the game gets
     * reloaded when pressing F5).
     */
    public override function onStateChangeBegin(event:StateChangeScriptEvent):Void {
        super.onStateChangeEnd();
        setup(ModuleHandler.getModule("ud-paths"));
    }
}
// Variation injector is so small now lol