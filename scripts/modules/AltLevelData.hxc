import funkin.data.story.level.LevelRegistry;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.Paths;
import funkin.ui.story.Level;
import funkin.util.assets.DataAssets;
import funkin.util.tools.ArrayTools;
import openfl.utils.Assets;
import StringTools;

/**
 * This module is used for tracking and loading
 * alternate data for levels. This is useful for
 * customizing the way a level is displayed on
 * the story mode menu for different variations or
 * difficulties, and even adding difficulty/variation-specific
 * songs to the level's song list (under certain requirements).
 * 
 * For more information and instructions, check
 * out the [README.md](https://github.com/AppleHair/FNF-UnrestDiffs/blob/main/data/UD/levels-alt/README.md) file in "data/UD/levels-alt".
 */
class AltLevelData extends Module {
    
    function new() {
        super('alt-level-data', 2);
    }

    // YOU SHOULD NOT MODIFY THE FOLLOWING VALUES DIRECTLY!!!
    // You are only allowed to read from them if you really need to,
    // and you should remember that arrays get passed by reference,
    // so if you assign an array to another variable, you will need
    // to use the .copy() method to avoid modifying the original + if
    // the array is nested, you will need to use the .map() method to
    // copy the nested arrays as well.

    /**
     * Tracks the default data of all levels.
     * Using this, we can restore every level's
     * original data after replacing it with alt data.
     * 
     * The first array contains the level IDs, and the
     * second array contains the level data objects.
     */
    var defaultLevelDatas:Array<Array<Dynamic>> = [[],[]];
    /**
     * Stores all alt level data.
     * 
     * The first array contains string keys (difficultyId+levelId),
     * and the second array contains the alt level data objects.
     */
    var levelAltData:Array<Array<Dynamic>> = [[],[]];

    /**
     * Used for tracking setup completion.
     */
    var finishedSetup:Bool = false;

    /**
     * Replaces a level's data with alt data.
     * If the level's original data isn't stored
     * as default level data in this module, it won't get replaced.
     * @param level the level whose data to replace.
     * @param dataKey The alt level data key to use.
     */
    function replaceData(level:Level, dataKey:String):Void {
        // Don't replace the data if the level's original data
        // isn't stored as default level data in this module,
        // because we won't be able to restore it later.
        if (!this.defaultLevelDatas[0].contains(level.id)) {return;}
        // If the requested alt level data doesn't
        // exist, restore the level's original data.
        if (!this.levelAltData[0].contains(dataKey)) {this.resetDataToDefault(level); return;}

        // Get the requested alt level data.
        var newData = this.levelAltData[1][this.levelAltData[0].indexOf(dataKey)];
        // We don't need to load the same data twice.
        if (newData == level._data) {return;}

        // Get the level's original data.
        var ogLevelData = this.defaultLevelDatas[1][this.defaultLevelDatas[0].indexOf(level.id)];

        // Replace the level's data with the alt data.
        level._data = newData;
        // Adding songs to alt levels
        // gets handles by considerAddingSongs.
        level._data.songs = ogLevelData.songs;
        // Only the level's original data
        // can determine its visibility!
        // Making difficulties invisible in
        // story mode using level alt data is
        // handled by story-diffs' boundDifficulty.
        level._data.visible = ogLevelData.visible;
        
    }


    /**
     * Resets a level's data to its original data.
     * @param level The level whose data to reset.
     */
    function resetDataToDefault(level:Level):Void {
        if (!this.defaultLevelDatas[0].contains(level.id)) {return;}
        level._data = this.defaultLevelDatas[1][this.defaultLevelDatas[0].indexOf(level.id)];
    }


    /**
     * Consider adding songs to the level's song list.
     * This function gets called for every alt level data
     * that gets detected, so you can use it to add songs
     * to the level's song list. This should only be used
     * before the first call to resetDataToDefault, because
     * the songs will be added to the level's original data
     * stored in this module, and this function relies on the
     * level's original song list to determine if the songs
     * should be added.
     * @param level The level whose song list to consider adding to.
     * @param songs The list of song IDs to consider adding.
     */
    function considerAddingSongs(level:Level, songs:Array<String>):Void {
        // Get the level's original data.
        var ogLevelData = this.defaultLevelDatas[1][this.defaultLevelDatas[0].indexOf(level.id)];
        // The song list needs to have all the songs the level
        // already has, and if the level already has all the songs
        // in the song list, we don't need to add them again.
        if (ArrayTools.isSuperset(ogLevelData.songs,songs) ||
            !ArrayTools.isSuperset(songs, level._data.songs)) {return;}

        // We'll use this array as a queue, meaning we
        // only use `push` and `shift` to modify it, and
        // songs from the `songs` array will be added to
        // this queue while we iterate through it.
        var accumulatedSongsQueue:Array<String> = [];
        for (songId in songs) {
            // If the song isn't already in the
            // level's song list, add it to the queue.
            if (ogLevelData.songs.indexOf(songId) == -1) {
                accumulatedSongsQueue.push(songId);
                continue;
            }
            // Otherwise, insert the songs accumulated in the queue
            // behind the current song in the default songs list.
            while (accumulatedSongsQueue.length > 0) {
                ogLevelData.songs.insert(
                    ogLevelData.songs.indexOf(songId),
                    accumulatedSongsQueue.shift()
                );
            }
        }
        // Push all the remaining songs from the
        // queue to the end of the default songs list.
        while (accumulatedSongsQueue.length > 0) {
            ogLevelData.songs.push(accumulatedSongsQueue.shift());
        }

        // using this method, we can add songs to the
        // level's song list while keeping the intended
        // order of the songs in the list, and without
        // having to worry about adding songs that are
        // already in the list.

        // Note that it's your responsibility to make sure
        // the songs appear only in the variations/difficulties
        // you want them to appear in, because added songs
        // will appear for all the difficulties they have,
        // regardless of the variation or difficulty associated 
        // with the alt level data which added them. This is
        // especially important if you don't want your song 
        // to appear in the default variation, because the 
        // game forces you to have a default variation, but
        // you can still remove it's difficulties from your
        // song script.
        
        // More information on this can be found in the
        // [README.md](https://github.com/AppleHair/FNF-UnrestDiffs/blob/main/data/UD/levels-alt/README.md) file in "data/UD/levels-alt".
    }

    /**
     * Adds alt data to a level for a specific variation's
     * difficulties. If the data isn't provided, it will be
     * searched for in this variation's alt data folder.
     * (data/UD/levels-alt/variations/{variationId}/{levelId}.json)
     * @param levelId The ID of the level to add alt data to.
     * @param variationId The ID of the variation to add alt data for.
     * @param data Provided alt data for the level.
     */
    function addLevelAltDataForVariation(levelId:String, variationId:String, ?data:Dynamic):Void {
        // trace('[alt-level-data]  -  Request received for alt data for level ('+levelId+') on variation ('+variationId+')');

        // Tries to find the variation's index in the variation definitions.
        var variIndex = ModuleHandler.getModule("diff-definer").scriptGet("variationDefs").indexOf(variationId);
        if (variIndex == -1) {return;}

        // If we find it, we can create a list of all
        // the difficulties associated with this variation.
        var variDifficulties:Array<String> = ModuleHandler.getModule("diff-definer").
        scriptGet("diffIndicesByVari")[variIndex].map(function(diffIndex:Int):String {
            return ModuleHandler.getModule("diff-definer").scriptGet("difficultyDefs")[0][diffIndex];
        });
        // If the variation doesn't have any difficulties,
        // we can stop here (usually doesn't happen).
        if (variDifficulties.length == 0) {return;}

        // If the data isn't provided, Try to load it.
        if (data == null) {
            var path = Paths.json(ModuleHandler.getModule("ud-paths").scriptCall("levelAlt", [variationId, true, levelId]));
            // If the data wasn't found, we should stop here.
            if (!Assets.exists(path)) {return;}
            // Load the data from the file.
            data = LevelRegistry.instance.parseEntryDataRaw(StringTools.trim(Assets.getText(path)), path);
        }

        // Go over all the difficulties and add the alt data for each one.
        for (diff in variDifficulties) {
            this.addLevelAltDataForDifficulty(levelId, diff, data);
        }

        // trace('[alt-level-data]  -  Successfully added alt data for level ('+levelId+') on variation ('+variationId+')');
    }

    /**
     * Adds alt data to a level for a specific difficulty.
     * If the data isn't provided, it will be searched for
     * in this difficulty's alt data folder.
     * (data/UD/levels-alt/difficulties/{difficultyId}/{levelId}.json)
     * @param levelId The ID of the level to add alt data to.
     * @param difficultyId The ID of the difficulty to add alt data for.
     * @param data Provided alt data for the level.
     */
    function addLevelAltDataForDifficulty(levelId:String, difficultyId:String, ?data:Dynamic):Void {
        // trace('[alt-level-data]  -  Request received for alt data for level ('+levelId+') on difficulty ('+difficultyId+')');

        // If the data isn't provided, Try to load it.
        if (data == null) {
            var path = Paths.json(ModuleHandler.getModule("ud-paths").scriptCall("levelAlt", [difficultyId, false, levelId]));
            // If the data wasn't found, we should stop here.
            if (!Assets.exists(path)) {return;}
            // Load the data from the file.
            data = LevelRegistry.instance.parseEntryDataRaw(StringTools.trim(Assets.getText(path)), path);
        }

        // Add the level's original data to the default data list if it
        // isn't already there, so we can keep track of it and restore it later.
        if (!this.defaultLevelDatas[0].contains(levelId)) {
            this.defaultLevelDatas[0].push(levelId);
            this.defaultLevelDatas[1].push(Level._fetchData(levelId));
        }

        // Consider adding songs from this alt data to the level's song list.
        this.considerAddingSongs(LevelRegistry.instance.fetchEntry(levelId), data.songs);

        // Store the provided alt data in this module as alt level data
        // of the provided level ID for the provided difficulty ID.
        this.levelAltData[0].push(difficultyId+levelId);
        this.levelAltData[1].push(data);

        // trace('[alt-level-data]  -  Successfully added alt data for level ('+levelId+') on difficulty ('+difficultyId+')');
    }

    // Need these because Hscript has dementia
    var variIdSETUP:String;
    var diffIdSETUP:String;

    function setup(UDPaths:Module):Void {
        if (this.finishedSetup) {return;}

        // Every time we need to go over a list of alt level data
        // in a folder, this array will store the level IDs we find.
        var levelIdList:Array<String>;
        
        // Get a list of all the variations in the game.
        var allVariations:Array<String> = ModuleHandler.
            getModule("diff-definer").scriptGet("variationDefs").copy();
        // Remove the default variation from the list.
        // (The default variation will always use the original data)
        allVariations.remove("default");
        // Iterate over all the variations in the game except for "default".
        for (variationId in allVariations) {
            // Get all the level IDs which have alt data for this variation.
            levelIdList = DataAssets.listDataFilesInPath(UDPaths.scriptCall("levelAlt", [variationId, true]), '.json').map(
                function(levelAltDataPath:String):String {
                    return levelAltDataPath.split('/')[0];
                }
            );
            // REMEMBER variationId
            variIdSETUP = variationId;
            // Add alt data for each level in the list.
            for (levelId in levelIdList) {
                this.addLevelAltDataForVariation(levelId, variIdSETUP);
            }
        }

        // Get a list of all the difficulties in the game.
        var allDifficulties:Array<String> = ModuleHandler.
            getModule("diff-definer").scriptGet("difficultyDefs")[0].copy();
        // Iterate over all the difficulties in the game.
        for (difficultyId in allDifficulties) {
            // Get all the level IDs which have alt data for this difficulty.
            levelIdList = DataAssets.listDataFilesInPath(UDPaths.scriptCall("levelAlt", [difficultyId, false]), '.json').map(
                function(levelAltDataPath:String):String {
                    return levelAltDataPath.split('/')[0];
                }
            );
            // REMEMBER difficultyId
            diffIdSETUP = difficultyId;
            // Add alt data for each level in the list.
            for (levelId in levelIdList) {
                this.addLevelAltDataForDifficulty(levelId, diffIdSETUP);
            }
        }

        // Reset all levels to their original
        // data, as it's stored in this module.
        for (levelId in this.defaultLevelDatas[0]) {
            this.resetDataToDefault(LevelRegistry.instance.fetchEntry(levelId));
        }

        trace('[alt-level-data]  -  Setup completed successfully');

        this.finishedSetup = true;
    }

    /**
     * Load the alt level data when the game
     * is loaded (before the title screen).
     */
    public override function onCreate(event:ScriptEvent):Void {
        super.onCreate(event);
        setup(ModuleHandler.getModule("ud-paths"));
    }
    
    /**
     * If needed, reload the alt level data
     * when the state changes (helps when the
     * game gets reloaded when pressing F5).
     */
    public override function onStateChangeBegin(event:StateChangeScriptEvent):Void {
        super.onStateChangeEnd(event);
        setup(ModuleHandler.getModule("ud-paths"));
    }
}