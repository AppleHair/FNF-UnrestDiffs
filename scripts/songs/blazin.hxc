import flixel.FlxG;
import funkin.graphics.FunkinSprite;
import funkin.Paths;
import funkin.play.cutscene.CutsceneType;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.Song;
import funkin.save.Save;
import funkin.util.Constants;

class BlazinSong extends Song {
    // Set these on onCountDownStart through
    // a module to override default behavior
    public var hasPlayedCutscene:Bool = false;
    public var cutsceneVideoPath:String = 'blazinCutscene';
    public var shouldCenterStrumline:Bool = true;
    public var comboPopUpsOffsetsCentered:Array<Float> = [480, -50];
    public var comboPopUpsOffsetsStandard:Array<Float> = [0, 0];

    function new() {
        super("blazin");
    }

    public function listDifficulties(variationId:String, variationIds:Array<String>, showLocked:Bool):Array<String> {
		if (showLocked || Save.instance.hasBeatenLevel('weekend1')) {
			return super.listDifficulties(variationId, variationIds);
		}

		// Hide all difficulties if the player has not beaten the week.
		return [];
	}

    var hasHidden:Bool = false;
    var lastShouldCenterStrumlineValue:Null<Bool> = null;

    function onCreate(event:ScriptEvent):Void {
        super.onCreate(event);

        hasPlayedCutscene = false;
        cutsceneVideoPath = 'blazinCutscene';
        shouldCenterStrumline = true;

        lastShouldCenterStrumlineValue = null;
        this.hasHidden = false;
    }

    public override function onCountdownStart(event:CountdownScriptEvent):Void {
        super.onCountdownStart(event);
        // a module could set shouldCenterStrumline to something else
        // before this function runs, including the first time, so we need
        // to use a nullable boolean to adapt to any changes in the value.
        if (lastShouldCenterStrumlineValue == null) {
            lastShouldCenterStrumlineValue = !shouldCenterStrumline;
        }
        if (lastShouldCenterStrumlineValue == !shouldCenterStrumline) {
            this.hasHidden = false;
        }
        lastShouldCenterStrumlineValue = shouldCenterStrumline;
    }

    function onUpdate(event:ScriptEvent):Void
    {
        super.onUpdate(event);

        if (!this.hasHidden)
        {
            this.hasHidden = true;
            hideOpponentStrumline();
            centerPlayerStrumline();
            PlayState.instance.comboPopUps.offsets = shouldCenterStrumline ?
                comboPopUpsOffsetsCentered : comboPopUpsOffsetsStandard;
        }
    }

    function hideOpponentStrumline()
    {
        var opponentStrumline:FlxSprite = PlayState.instance.opponentStrumline;
        if (opponentStrumline != null)
        {
            for (arrow in opponentStrumline.members)
            {
                arrow.visible = !shouldCenterStrumline;
            }
        }
    }

    function centerPlayerStrumline()
    {
        // This is a song gimmick we are never making middlescroll an option.

        var playerStrumline:FlxSprite = PlayState.instance.playerStrumline;
        if (playerStrumline != null)
        {
            playerStrumline.x = shouldCenterStrumline ? 
                FlxG.width / 2 - playerStrumline.width / 2 :
                FlxG.width / 2 + Constants.STRUMLINE_X_OFFSET;
        }
    }

    public override function onSongEnd(event:CountdownScriptEvent):Void {
        super.onSongEnd(event);

        // Keep the cutscene from playing outside of story mode.
        if (!PlayStatePlaylist.isStoryMode) hasPlayedCutscene = true;

        if (!hasPlayedCutscene) {
            trace('Pausing ending to play a video cutscene (`blazin`)');

            hasPlayedCutscene = true;

            // Add a black background behind the cutscene to fix a transition bug!
            trace('Adding black background behind cutscene over UI');
            var bgSprite = new FunkinSprite(-100, -100);
            bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
            bgSprite.cameras = [PlayState.instance.camHUD]; // Show over the HUD.
            bgSprite.zIndex = 1000000;
            PlayState.instance.add(bgSprite);
            PlayState.instance.refresh();

            event.cancel(); // CANCEL THE COUNTDOWN!

            startVideo();
        } else {
            // Make sure the cutscene can play again next time!
            hasPlayedCutscene = false;
            // DO NOT CANCEL THE EVENT!
        }
    }

    function startVideo() {
        VideoCutscene.play(Paths.videos(cutsceneVideoPath), CutsceneType.ENDING);
        // This will call onSongEnd() again so make sure the flag is set!
        hasPlayedCutscene = true;
    }
}
