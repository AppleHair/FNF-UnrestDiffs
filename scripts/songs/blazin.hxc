// Import what ever you want here:

import funkin.play.PlayState;
import funkin.Paths;
import funkin.play.cutscene.VideoCutscene;
import funkin.graphics.FunkinSprite;
import funkin.play.cutscene.CutsceneType;
import funkin.play.PlayStatePlaylist;
import funkin.ui.story.StoryMenuState;
import funkin.save.Save;


// DON'T REMOVE THESE IMPORTS!!!
import flixel.FlxG;

import funkin.play.song.Song;
import funkin.data.song.SongMetadata;
import funkin.play.song.SongDifficulty;
import funkin.util.tools.ArrayTools;
import funkin.util.Constants;

// fill your class name
class BlazinSong extends Song {

    public function new(songId:String) {
        // trace("[SONG] - Called init");
        // trace(songId);

        // fill your song id
        super("blazin");
        // do what ever you want here:
        // (IGNORE `songId` PARAMETER!!)

		this.hasHidden = false;
		this.hasPlayedCutscene = false;


        //   VARIATION INJECTION DOT TOUCH!!!   //
        if (songId != "unknown") {
            // trace("[SONG] - Receved variations");
            var varis = songId.substr(1,songId.length-2).split(',');
            // trace(varis);
            var res = this.injectVariants(varis);
            if (!res) {return null;}
        }
    }

    // do what ever you want here:

	function onCreate(event:ScriptEvent):Void {
		super.onCreate(event);

		this.hasHidden = false;
		this.hasPlayedCutscene = false;
	}

	function onDestroy(event:ScriptEvent):Void {
		super.onDestroy(event);

		this.hasHidden = false;
	}

	function onNoteHit(event:HitNoteScriptEvent):Void {
		super.onNoteHit(event);
	}

	var hasHidden = false;
	var hasPlayedCutscene:Bool = false;

	function onUpdate(event:ScriptEvent):Void
	{
		super.onUpdate(event);

		if (!this.hasHidden)
		{
			this.hasHidden = true;
			hideOpponentStrumline();
			centerPlayerStrumline();
		}
	}

	function hideOpponentStrumline()
	{
		var opponentStrumline:FlxSprite = PlayState.instance.opponentStrumline;
		if (opponentStrumline != null)
		{
			for (arrow in opponentStrumline.members)
			{
				arrow.visible = false;
			}
		}
	}

	function centerPlayerStrumline()
	{
    	// This is a song gimmick we are never making middlescroll an option.

		var playerStrumline:FlxSprite = PlayState.instance.playerStrumline;
		if (playerStrumline != null)
		{
			playerStrumline.x = FlxG.width / 2 - playerStrumline.width / 2;
		}
	}

  	public override function onSongEnd(event:CountdownScriptEvent):Void {
		super.onSongEnd(event);

		// Keep the cutscene from playing outside of story mode.
    	if (!PlayStatePlaylist.isStoryMode) hasPlayedCutscene = true;

    	if (!hasPlayedCutscene) {
      		trace('Pausing ending to play a video cutscene (`blazin`)');

      		hasPlayedCutscene = true;

			// Add a black background behind the cutscene to fix a transition bug!
			trace('Adding black background behind cutscene over UI');
			var bgSprite = new FunkinSprite(-100, -100);
			bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
			bgSprite.cameras = [PlayState.instance.camHUD]; // Show over the HUD.
			bgSprite.zIndex = 1000000;
			PlayState.instance.add(bgSprite);
			PlayState.instance.refresh();

      		event.cancel(); // CANCEL THE COUNTDOWN!

      		startVideo();
    	} else {
			// Make sure the cutscene can play again next time!
			hasPlayedCutscene = false;
			// DO NOT CANCEL THE EVENT!
		}
	}

  	function startVideo() {
		VideoCutscene.play(Paths.videos('blazinCutscene'), CutsceneType.ENDING);
		// This will call onSongEnd() again so make sure the flag is set!
		hasPlayedCutscene = true;
  	}



    //-------------------------------------//
    //    DOT TOUCH `injectVariants`!!!    //
    //-------------------------------------//

    public function injectVariants(varis:Array<String>):Bool {
        for (vari in varis) {
            var variMeta:Null<SongMetadata> = this.fetchVariationMetadata(this.id, vari);
            if (variMeta == null) {
                FlxG.log.warn('[SONG] Failed to load variation metadata ('+this.id+':'+vari+'), is the path correct?');
                trace('[SONG]  FAILED to load variation: '+vari);
                return false;
            }
            this._metadata.set(variMeta.variation, variMeta);
            trace('[SONG]  Loaded variation: '+vari);
        }
        this.populateDifficulties();
        return true;
    }

    //---------------------------------------//
    //    IF YOU EDIT `listDifficulties`,    //
    //    IGNORE `variationIds` PARAMETER    //
    //            AT ALL COSTS!!!            //
    //---------------------------------------//

    public override function listDifficulties(?variationId:String,
      ?variationIds:Array<String>, showLocked:Bool = false,
      showHidden:Bool = false):Array<String>
    {
        if (showLocked || Save.instance.hasBeatenLevel('weekend1')) {
			return super.listDifficulties(variationId, this.variations);
	    }
		// Here I added the check Std.isOfType(FlxG.state, StoryMenuState)
		// In order for the base game weekend1 to always show up on story mode.
		if (Std.isOfType(FlxG.state, StoryMenuState)) {
		    return super.listDifficulties('default');
		}


		// Hide all difficulties if the player has not beaten the week.
		return [];
    }

    //---------------------------------------//
    //      IF YOU EDIT `getDifficulty`      //
    //     IGNORE `variations` PARAMETER     //
    //            AT ALL COSTS!!!            //
    //---------------------------------------//

    public override function getDifficulty(?diffId:String, ?variation:String,
        ?variations:Array<String>):Null<SongDifficulty>
    {
        if (diffId == null) {diffId = listDifficulties(variation)[0];}
        tryVariationId = this.getFirstValidVariation(diffId);
        if (tryVariationId == null) {return  null;}
        if (variation == null) {variation = tryVariationId;}

        var variationSuffix = (variation != Constants.DEFAULT_VARIATION) ? '-'+variation : '';

        if (difficulties.exists(diffId+variationSuffix)) {
            return difficulties.get(diffId+variationSuffix);
        }
        return (variation == tryVariationId ? null : this.getDifficulty(diffId));
    }

    //-------------------------------------------//
    //   IF YOU EDIT `getFirstValidVariation`,   //
    //   IGNORE `possibleVariations` PARAMETER   //
    //              AT ALL COSTS!!!              //
    //-------------------------------------------//

    public override function getFirstValidVariation(?diffId:String,
        ?possibleVariations:Array<String>):Null<String>
    {
        return super.getFirstValidVariation(diffId);
    }

    //---------------------------------------//
    //      IF YOU EDIT `hasDifficulty`      //
    //    IGNORE `variationIds` PARAMETER    //
    //            AT ALL COSTS!!!            //

    // (NOTE: This function is unused in the //
    //  game's code on 0.3.2, but it might   //
    //  get reused in the future)            //
    //---------------------------------------//

    public override function hasDifficulty(diffId:String,
        ?variationId:String, ?variationIds:Array<String>):Bool
    {
        tryVariationId = this.getFirstValidVariation(diffId);
        if (tryVariationId == null) {return false;}
        if (variationId == null) {variationId = tryVariationId;}

        variationIds = null;

        var variationSuffix = (variationId != Constants.DEFAULT_VARIATION) ? '-'+variationId : '';
        return this.difficulties.exists(diffId+variationSuffix);
    }
}
