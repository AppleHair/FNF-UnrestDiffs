// UNRISTRICTED DIFFICULTIES' IMPORTS
// DON'T REMOVE THESE IMPORTS!!!
import flixel.FlxG;
import funkin.data.song.SongMetadata;
import funkin.play.song.Song;
import funkin.play.song.SongDifficulty;
import funkin.util.Constants;
// SONG SPECIFIC IMPORTS:
import flixel.FlxSprite;
import flixel.math.FlxBasePoint;
// We have to use FlxBasePoint in scripts because FlxPoint is inlined and not available in scripts
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.Paths;
import funkin.play.cutscene.CutsceneType;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.GameOverSubState;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.stage.StageProp;
import funkin.save.Save;
import funkin.ui.story.StoryMenuState;

class TwoHOTSong extends Song {
    // Set these on onCountDownStart through
    // a module to override default behavior
    public var hasPlayedCutscene:Bool = false;
    public var cutsceneVideoPath:String = '2hotCutscene';
    public var cancelInGameCutscene:Bool = false;
    public var cancelSpraycans:Bool = false;// Gets set to true if 'spraycanPile' doesn't exist in the stage
    public var spraycanAtlasClassName:String = 'SpraycanAtlasSprite';
    public var cancelGameoverExplode:Bool = true;// Gets set to false for pico-playable by default
    public var gameoverExplodeSuffix:String = '-pico-explode';
    // unused
    public var impactParticleImagePath:String = 'CanImpactParticle';

    function new() {
        super("2hot");
    }
    // SONG SPECIFIC FUNCTIONS/ATTRIBUTES:

    //var tempConductor:Conductor;
    //var cutsceneMusic:FunkinSound;

    /**
     * Health lost when hit by can.
     */
    var HEALTH_LOSS = 0.25 * 2;

    public override function onCountdownStart(event:CountdownScriptEvent):Void {
        super.onCountdownStart(event);
        // if the current stage doesn't have a spraycan pile,
        // cancel the usage of the spraycan visuals in this song
        if (PlayState.instance.currentStage.namedProps.get('spraycanPile') == null) {
            cancelSpraycans = true;
        }
    }

    function onSongRetry(event:ScriptEvent) {
        super.onSongRetry(event);

        hasPlayedCutscene = true;

        removeCans();
        gunCocked = false;
    }

    public override function onSongEnd(event:CountdownScriptEvent):Void {
        super.onSongEnd(event);
        if (!PlayStatePlaylist.isStoryMode) hasPlayedCutscene = true;

        if (!hasPlayedCutscene) {
            hasPlayedCutscene = true;

            event.cancel();

            // start the video cutscene and hide it so the other stuff can happen after
            startCutscene();
        } else {
            // Make sure the cutscene can play again next time!
            hasPlayedCutscene = false;
            // DO NOT CANCEL THE EVENT!
        }
    }

    // the Other stuff
    function endCutscene() {
        VideoCutscene.onVideoStarted.removeAll();
        VideoCutscene.hideVideo();

        new FlxTimer().start(1, function(tmr)
        {
            PlayState.instance.tweenCameraToPosition(1539, 833.5, 2, FlxEase.quadInOut);
            PlayState.instance.tweenCameraZoom(0.69, 2, true, FlxEase.quadInOut);
        });

        // Since no music plays at this part I'm too lazy to hook Nene up to a conductor,
        // so we just dance on a timer here.
        new FlxTimer().start(0.5, function(tmr)
        {
            PlayState.instance.currentStage.getGirlfriend().dance(true);
        }, 10);

        new FlxTimer().start(2, function(tmr)
        {
            PlayState.instance.currentStage.getBoyfriend().playAnimation('intro1', true, true);
        });
        new FlxTimer().start(2.5, function(tmr)
        {
            PlayState.instance.currentStage.getDad().playAnimation('pissed', true, true);
        });

        new FlxTimer().start(6, function(tmr)
        {
            // video would play around here
            //PlayState.instance.endSong(true);

            trace('Pausing ending to play a video cutscene (`2hot`)');

            // Add a black background behind the cutscene to fix a transition bug!
            trace('Adding black background behind cutscene over UI');
            var bgSprite = new FunkinSprite(-100, -100);
            bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
            bgSprite.cameras = [PlayState.instance.camHUD]; // Show over the HUD.
            bgSprite.zIndex = 1000000;
            PlayState.instance.add(bgSprite);
            PlayState.instance.refresh();

            VideoCutscene.showVideo();
        });

    }

    function startCutscene(){
        PlayState.instance.camHUD.visible = false;

        PlayState.instance.isInCutscene = true;
        hasPlayedCutscene = true;

        if (cancelInGameCutscene) {

            trace('Pausing ending to play a video cutscene (`2hot`)');

            // Add a black background behind the cutscene to fix a transition bug!
            trace('Adding black background behind cutscene over UI');
            var bgSprite = new FunkinSprite(-100, -100);
            bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
            bgSprite.cameras = [PlayState.instance.camHUD]; // Show over the HUD.
            bgSprite.zIndex = 1000000;
            PlayState.instance.add(bgSprite);
            PlayState.instance.refresh();
        } else {
            VideoCutscene.onVideoStarted.add(endCutscene);
            
            PlayState.instance.currentStage.getBoyfriend().danceEvery = 0;
            PlayState.instance.currentStage.getDad().danceEvery = 0;
        }

        startVideo();
    }

    function startVideo() {
        VideoCutscene.play(Paths.videos(cutsceneVideoPath), CutsceneType.ENDING);
    }

    var gunCocked:Bool = false;
    var spawnedCans:Array<ScriptedFlxAtlasSprite> = [];

    function removeCans() {
        for (can in spawnedCans)
        {
            can.kill();
        }
        spawnedCans = [];
    }

    function hardClear() {
        removeCans();
        gunCocked = false;
    }

    function onStateChangeEnd(event:StateChangeScriptEvent) {
        super.onStateChangeEnd(event);

        if ((Std.isOfType(event.targetState, PlayState)))
        {
            return;
        }
        hardClear();
    }

    function onNoteHit(event:HitNoteScriptEvent) {
        super.onNoteHit(event);
        if (PlayState.instance.currentStage == null) return;

        switch (event.note.kind)
        {
            case "weekend-1-lightcan":
                // Do nothing, but place this such that the animation plays at the right time.
            case "weekend-1-kickcan":
                // This creates the can and starts the animation.
                // We define the behavior of the can in a separate scripted class,
                // which allows the can to track and manage its own properties.
                if (!cancelSpraycans) {
                    var newCan:ScriptedFlxAtlasSprite = ScriptedFlxAtlasSprite.init(spraycanAtlasClassName, 0, 0);

                    var spraycanPile = PlayState.instance.currentStage.getNamedProp('spraycanPile');

                    newCan.x = spraycanPile.x - 430;
                    newCan.y = spraycanPile.y - 840;
                    newCan.zIndex = spraycanPile.zIndex - 1;

                    newCan.scriptCall('playCanStart');

                    PlayState.instance.currentStage.add(newCan);
                    PlayState.instance.currentStage.refresh(); // Apply z-index.
                    spawnedCans.push(newCan);
                }
            case "weekend-1-kneecan":
                // Do nothing, but place this such that the animation plays at the right time.
            case "weekend-1-cockgun": // lol
                gunCocked = true;
                new FlxTimer().start(1.0, function()
                {
                    gunCocked = false;
                });
            case "weekend-1-firegun":
                if (gunCocked)
                {
                    trace('Firing gun!');
                    shootNextCan();
                    new FlxTimer().start(1/24, function(tmr)
                    {
                        darkenStageProps();
                    });
                }
                else
                {
                    trace('Cannot fire gun!');
                    // The player cannot hit this note.
                    event.cancelEvent();
                }
        }
    }

    public var STATE_ARCING:Int = 2; // In the air.
    public var STATE_SHOT:Int = 3; // Hit by the player.
    public var STATE_IMPACTED:Int = 4; // Impacted the player.

    function getNextCanWithState(desiredState:Int) {
        for (index in 0...spawnedCans.length)
        {
            var can = spawnedCans[index];
            var canState = can.scriptGet('currentState');

            if (canState == desiredState)
            {
                // Return the can we found.
                return can;
            }
        }
        return null;
    }

    function onUpdate(event:UpdateScriptEvent) {
        super.onUpdate(event);
    }

    function darkenStageProps() {
        // Darken the background, then fade it back.
        for (stageProp in PlayState.instance.currentStage.members)
        {
            // Determine if the stage prop is something that should be excluded from darkening.
            if (Std.isOfType(stageProp, StageProp)) {
                if (stageProp.name == "bf" || stageProp.name == "dad" || stageProp.name == "gf") // This refers to the player.
                {
                    // Exclude.
                    continue;
                }
            }

            // Select cans.
            if (spawnedCans.contains(stageProp)) {
                // Exclude.
                continue;
            }

            // Hacky way of selecting PicoPlayable.picoFade.
            if (stageProp.zIndex == (PlayState.instance.currentStage.getBoyfriend().zIndex - 3)) {
                // Exclude.
                continue;
            }

            // If not excluded, darken.
            stageProp.color = 0xFF111111;
            new FlxTimer().start(1/24, (tmr) ->
            {
                stageProp.color = 0xFF222222;
                FlxTween.color(stageProp, 1.4, 0xFF222222, 0xFFFFFFFF);
            });
        }
    }

    function blackenStageProps() {
        // Blacken the background (also Darnell and Nene) entirely, then restore it once the gameOverSubState is up.
        for (stageProp in PlayState.instance.currentStage.members)
        {
            // Determine if the stage prop is something that should be excluded from blackening.
            if (Std.isOfType(stageProp, StageProp)) {
                if (stageProp.name == "bf") // This refers to the player.
                {
                    stageProp.visible = false;
                    // Exclude.
                    continue;
                }
            }

            // Select cans.
            if (spawnedCans.contains(stageProp)) {
                // Exclude.
                continue;
            }

            // If not excluded, blacken.
            stageProp.color = 0xFF000000;
            new FlxTimer().start(1.0, (tmr) ->
            {
                stageProp.color = 0xFFFFFFFF;
            });
        }
    }

    function shootNextCan() {
        var can = getNextCanWithState(STATE_ARCING);

        if (can != null)
        {
            can.scriptSet('currentState', STATE_SHOT);
            can.scriptCall('playCanShot');
        }
    }

    function missNextCan() {
        var can = getNextCanWithState(STATE_ARCING);

        if (can != null)
        {
            can.scriptSet('currentState', STATE_IMPACTED);
        }
    }

    function spawnImpactParticle() {
        var impactParticle = FunkinSprite.createSparrow(0, 0, impactParticleImagePath);
        impactParticle.animation.addByPrefix('idle', 'CanImpactParticle0', 24, false);
        impactParticle.animation.play('idle');
        impactParticle.x = PlayState.instance.currentStage.getBoyfriend().x + 400;
        impactParticle.y = PlayState.instance.currentStage.getBoyfriend().y - 200;
        PlayState.instance.currentStage.add(impactParticle);

        impactParticle.animation.finishCallback = function() {
            impactParticle.kill();
        };
    }

    function onNoteMiss(event:NoteScriptEvent) {
        super.onNoteMiss(event.note);

        trace('Missed note on 2hot stage...' + event.note.noteData);

        switch (event.note.kind)
        {
            case "weekend-1-cockgun":
                event.healthChange = 0.0; // We cause health loss later.
            case "weekend-1-firegun":
                gunCocked = false;
                event.healthChange = 0.0; // We cause health loss elsewhere.
                missNextCan();
                takeCanDamage();
            case "weekend-1-firegun-hip":
                gunCocked = false;
                event.healthChange = 0.0; // We cause health loss elsewhere.
                missNextCan();
                takeCanDamage();
            case "weekend-1-firegun-far":
                gunCocked = false;
                event.healthChange = 0.0; // We cause health loss elsewhere.
                missNextCan();
                takeCanDamage();
        }
    }

    function takeCanDamage():Void {
        trace('Taking damage from can exploding!');
        PlayState.instance.health -= HEALTH_LOSS;
        // TODO: This is jank as hell! Add some better way to prevent onNoteMiss's normal health loss.
        // PlayState.instance.health += 0.0775;

        if (PlayState.instance.health <= 0 && !cancelGameoverExplode) {
            trace('Died to the can! Use special death animation.');

            // Reset to standard death animation.
            GameOverSubState.musicSuffix = gameoverExplodeSuffix;
            GameOverSubState.blueBallSuffix = gameoverExplodeSuffix;

            blackenStageProps();
        }
    }

    /**
     * Replay the cutscene after leaving the song.
     */
    function onCreate(event:ScriptEvent):Void {
        super.onCreate(event);

        hasPlayedCutscene = false;
        cutsceneVideoPath = '2hotCutscene';

        cancelInGameCutscene = false;

        cancelSpraycans = false;
        spraycanAtlasClassName = 'SpraycanAtlasSprite';

        gameoverExplodeSuffix = '-pico-explode';
        switch (PlayState.instance.currentStage.getBoyfriend().characterId) {
            case 'pico-playable':
                cancelGameoverExplode = false;
            default:
                cancelGameoverExplode = true;
        }

        impactParticleImagePath = 'CanImpactParticle';
    }



    // UNRISTRICTED DIFFICULTIES' FUNCTIONS:

    //--------------------------------------//
    //     DOT TOUCH `injectVariation`!!!   //
    //--------------------------------------//
    /**
     * Tries to injects a new variation into the song.
     * Returns true if the variation was successfully injected,
     * and false if the variation failed to inject. Used by the
     * variation injector when injecting new variations into the
     * different songs according to the provided injection data
     * files, while making sure the sorting is done correctly
     * and the relationship between variations and difficulties
     * is One-to-many.
     * @param vari the variation id to inject.
     * @return Bool
     */
     public function injectVariation(vari:String):Bool {
        // fetch the requested variation's
        // metadata for the song
        var variMeta:Null<SongMetadata> = this.fetchVariationMetadata(this.id, vari);
        // if it doesn't exist, the
        // variation injection failed
        if (variMeta == null) {
            FlxG.log.warn('[SONG] Failed to load variation metadata ('+this.id+':'+vari+'), is the path correct?');
            trace('[SONG]  FAILED to load variation: '+vari);
            // false for failure
            return false;
        }
        // add the new variation
        // metadata to the _metadata map
        this._metadata.set(variMeta.variation, variMeta);
        trace('[SONG]  Loaded variation: '+vari);
        // true for success
        return true;
    }

    //---------------------------------------//
    //    IF YOU EDIT `listDifficulties`,    //
    //    IGNORE `variationIds` PARAMETER    //
    //            AT ALL COSTS!!!            //
    //---------------------------------------//
    /**
     * List all the difficulties in this song.
     *
     * @param variationId Optionally filter by a single variation.
     * @param showLocked Include charts which are not unlocked
     * @param showHidden Include charts which are not accessible to the player.
     *
     * @return The list of difficulties.
     */
    public override function listDifficulties(?variationId:String,
        ?variationIds:Array<String>, showLocked:Bool = false,
        showHidden:Bool = false):Array<String>
    {
        if (showLocked || Save.instance.hasBeatenLevel('weekend1')) {
            // uses the function normally, but while ignoring the variationIds
            // parameter, to prevent freeplay from filtering out variations.
            return super.listDifficulties(variationId,this.variations,showLocked,showHidden);
        }
        // Here I added the check Std.isOfType(FlxG.state, StoryMenuState)
        // In order for the base game weekend1 to always show up on story mode.
        if (Std.isOfType(FlxG.state, StoryMenuState)) {
            return super.listDifficulties('default');
        }
        // Hide all difficulties if the player has not beaten the week.
        return [];
    }

    //---------------------------------------//
    //      IF YOU EDIT `getDifficulty`      //
    //     IGNORE `variations` PARAMETER     //
    //            AT ALL COSTS!!!            //
    //---------------------------------------//
    /**
     * Retrieve the metadata for a specific difficulty, including the chart if it is loaded.
     * @param diffId The difficulty ID, such as `easy` or `hard`.
     * @param variation The variation ID to fetch the difficulty for.
     * @return The difficulty data.
     */
    public override function getDifficulty(?diffId:String,
        ?variation:String, ?variations:Array<String>):Null<SongDifficulty>
    {
        // if diffId is null, try to get the
        // first difficulty available in the song,
        // with priority to the provided variation
        // if it was provided.
        if (diffId == null && variation != null) {diffId = listDifficulties(variation)[0];}
        if (diffId == null) {diffId = listDifficulties()[0];}
        // if diffId is still null after this point, there
        // are no difficulties in this song at all.
        if (diffId == null) {return null;}

        // Try to get the first valid variation to the
        // difficulty and replace it with the provided
        // variation if no variation was actually provided.
        tryVariationId = this.getFirstValidVariation(diffId);
        if (variation == null) {variation = tryVariationId;}
        // If there's no first valid variation to the
        // difficulty, the difficulty doesn't exist in the song.
        if (tryVariationId == null) {return  null;}

        // create the suffix for this difficulty in the difficulties map
        var variationSuffix = (variation != Constants.DEFAULT_VARIATION) ? '-'+variation : '';

        // if the difficulty exists in
        // the difficulties map, return it
        if (difficulties.exists(diffId+variationSuffix)) {
            return difficulties.get(diffId+variationSuffix);
        }
        // otherwise, attempt to find the difficulty with
        // the first valid variation, and only if that doesn't
        // work, return null.
        return (variation == tryVariationId ? null : this.getDifficulty(diffId));
    }

    //-------------------------------------------//
    //   IF YOU EDIT `getFirstValidVariation`,   //
    //   IGNORE `possibleVariations` PARAMETER   //
    //              AT ALL COSTS!!!              //
    //-------------------------------------------//
    public override function getFirstValidVariation(?diffId:String,
        ?possibleVariations:Array<String>):Null<String>
    {
	    // uses the function normally, but while
        // ignoring the possibleVariations parameter,
        // to prevent freeplay from filtering out variations
        return super.getFirstValidVariation(diffId);
    }

    //---------------------------------------//
    //      IF YOU EDIT `hasDifficulty`      //
    //    IGNORE `variationIds` PARAMETER    //
    //            AT ALL COSTS!!!            //
    //---------------------------------------//
    public override function hasDifficulty(diffId:String,
        ?variationId:String, ?variationIds:Array<String>):Bool
    {
        // if diffId is null, try to get the
        // first difficulty available in the song,
        // with priority to the provided variation
        // if it was provided.
        if (diffId == null && variationId != null) {diffId = listDifficulties(variationId)[0];}
        if (diffId == null) {diffId = listDifficulties()[0];}
        // if diffId is still null after this point,
        // there are no difficulties in this song at all.
        if (diffId == null) {return false;}

        // Try to get the first valid variation to the
        // difficulty and replace it with the provided
        // variation if no variation was actually provided.
        tryVariationId = this.getFirstValidVariation(diffId);
        if (variationId == null) {variationId = tryVariationId;}
        // If there's no first valid variation to the
        // difficulty, the difficulty doesn't exist in the song.
        if (tryVariationId == null) {return false;}

        // create the suffix for this difficulty in the difficulties map
        var variationSuffix = (variationId != Constants.DEFAULT_VARIATION) ? '-'+variationId : '';

        // if the difficulty exists in
        // the difficulties map, return true
        if (this.difficulties.exists(diffId+variationSuffix)) {
            return true;
        }
        // otherwise, attempt to find the difficulty with
        // the first valid variation, and only if that doesn't
        // work, return false.
        return (variationId == tryVariationId ? false : this.hasDifficulty(diffId));

        // like getDifficulty, but returns a boolean for if the
        // difficulty exists in the song or not. This function
        // is currently (FNF 0.3.3) unused and deprecated by UD
        // in favor of getDifficulty (checks for null), but it's
        // still being maintained here in case it gets reused in
        // a future update to FNF.
    }
}
