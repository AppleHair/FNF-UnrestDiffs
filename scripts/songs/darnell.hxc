// UNRISTRICTED DIFFICULTIES' IMPORTS
// DON'T REMOVE THESE IMPORTS!!!
import flixel.FlxG;
import funkin.data.song.SongMetadata;
import funkin.play.song.Song;
import funkin.play.song.SongDifficulty;
import funkin.util.Constants;
// SONG SPECIFIC IMPORTS:
import flixel.FlxSprite;
import flixel.math.FlxBasePoint;
// We have to use FlxBasePoint in scripts because FlxPoint is inlined and not available in scripts
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.data.song.SongRegistry;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.Paths;
import funkin.play.cutscene.CutsceneType;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.GameOverSubState;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.stage.StageProp;
import funkin.save.Save;
import funkin.ui.story.StoryMenuState;

class DarnellSong extends Song {
    // Set these on onCountDownStart through
    // a module to override default behavior

    // video cutscene
    public var hasPlayedCutscene:Bool = false;
    public var cutsceneVideoPath:String = 'darnellCutscene';

    // in game cutscene
    public var hasPlayedInGameCutscene:Bool = false;
    public var inGameCutsceneMusicPath:String;
    public var inGameCutsceneMusicDataId:String = 'darnellCanCutscene';
    public var picoPlayScriptImpl:Bool = false;// Gets set to true for pico-playable by default
    public var darnellScriptImpl:Bool = false;// Gets set to true for darnell by default
    public var cutsceneSpraycanImagePath:String = 'wked1_cutscene_1_can';
    public var spraycanAtlasClassName:String = 'SpraycanAtlasSprite';
    public var cancelSpraycans:Bool = false;// Gets set to true if 'spraycanPile' doesn't exist in the stage
    public var darnellLaughSoundPath:String = 'cutscene/darnell_laugh';
    public var neneLaughSoundPath:String = 'cutscene/nene_laugh';

    function new() {
        super("darnell");
        inGameCutsceneMusicPath = Paths.music("darnellCanCutscene/darnellCanCutscene", "weekend1");
    }
    // SONG SPECIFIC FUNCTIONS/ATTRIBUTES:

    var cutsceneMusic:FunkinSound;
    var cutsceneConductor:Conductor;
    var bgSprite:FunkinSprite;

    public override function onCountdownStart(event:CountdownScriptEvent):Void {
        super.onCountdownStart(event);

        if (!PlayStatePlaylist.isStoryMode) {
            hasPlayedCutscene = true;
            hasPlayedInGameCutscene = true;
        }

        if(hasPlayedCutscene && !hasPlayedInGameCutscene) {
            trace('Pausing countdown to play in game cutscene');

            hasPlayedInGameCutscene = true;

            event.cancel(); // CANCEL THE COUNTDOWN!

            // if the current stage doesn't have a spraycan pile,
            // cancel the usage of the spraycan visuals in this cutscene
            if (PlayState.instance.currentStage.namedProps.get('spraycanPile') == null) {
                cancelSpraycans = true;
            }

            PlayState.instance.camHUD.visible = false;
            introCutscene();
        }

        if (!hasPlayedCutscene) {
            trace('Pausing countdown to play a video cutscene (`darnell`)');

            hasPlayedCutscene = true;

            event.cancel(); // CANCEL THE COUNTDOWN!

            PlayState.instance.tweenCameraZoom(1.3, 0, true);

            // trace('Adding black background behind cutscene over UI');
            bgSprite = new FunkinSprite(0, 0);
            bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
            bgSprite.cameras = [PlayState.instance.camCutscene]; // Show over the HUD but below the video.
            // this
            bgSprite.zIndex = -10000;
            PlayState.instance.add(bgSprite);
            PlayState.instance.refresh();

            startVideo();
        }
    }

    function introCutscene() {
        var picoPos:Array<Float> = [PlayState.instance.currentStage.getBoyfriend().cameraFocusPoint.x, PlayState.instance.currentStage.getBoyfriend().cameraFocusPoint.y];
        var nenePos:Array<Float> = [PlayState.instance.currentStage.getGirlfriend().cameraFocusPoint.x, PlayState.instance.currentStage.getGirlfriend().cameraFocusPoint.y];
        var darnellPos:Array<Float> = [PlayState.instance.currentStage.getDad().cameraFocusPoint.x, PlayState.instance.currentStage.getDad().cameraFocusPoint.y];

        var cutsceneDelay:Float = 2;

        cutsceneMusic = FunkinSound.load(inGameCutsceneMusicPath, true);
        cutsceneMusic.volume = 1;

        cutsceneConductor = new Conductor();

        var songMusicData:Null<SongMusicData> = SongRegistry.instance.parseMusicData(inGameCutsceneMusicDataId);
        if (songMusicData != null) {
            cutsceneConductor.mapTimeChanges(songMusicData.timeChanges);
        }

        cutsceneConductor.onBeatHit.add(onCutsceneBeatHit);

        var cutsceneCan:FunkinSprite;
        var newCan:ScriptedFlxAtlasSprite;
        if (!cancelSpraycans) {
            var spraycanPile = PlayState.instance.currentStage.getNamedProp('spraycanPile');

            cutsceneCan = FunkinSprite.createSparrow(darnellPos[0], darnellPos[1], cutsceneSpraycanImagePath);
            cutsceneCan.animation.addByPrefix('forward', "can kick quick0", 24, false);
            cutsceneCan.animation.addByPrefix('up', "can kicked up0", 24, false);
            cutsceneCan.x = spraycanPile.x + 30;
            cutsceneCan.y = spraycanPile.y - 320;
            cutsceneCan.zIndex = spraycanPile.zIndex - 1;
            PlayState.instance.currentStage.add(cutsceneCan);
            PlayState.instance.currentStage.refresh();
            cutsceneCan.visible = false;

            newCan = ScriptedFlxAtlasSprite.init(spraycanAtlasClassName, 0, 0);
            newCan.x = spraycanPile.x - 430;
            newCan.y = spraycanPile.y - 840;
            newCan.zIndex = 300;
            PlayState.instance.currentStage.add(newCan);
            PlayState.instance.currentStage.refresh();
            newCan.visible = false;
        }        

        PlayState.instance.currentStage.getBoyfriend().playAnimation('intro1', true);

        // camera sets up, pico does his animation showing him pissed
        new FlxTimer().start(0.1, function(tmr)
        {
            PlayState.instance.tweenCameraToPosition(picoPos[0] + 250, picoPos[1], 0);

            PlayState.instance.tweenCameraZoom(1.3, 0, true, FlxEase.quadInOut);
        });

        new FlxTimer().start(0.7, function(tmr){
            cutsceneMusic.play(false);
            FlxTween.tween(bgSprite, { alpha: 0}, 2, {startDelay: 0.3}, function(){bgSprite.visible = false;});
        });

        // move camera out to show everything
        new FlxTimer().start(cutsceneDelay, function(tmr){
            PlayState.instance.tweenCameraToPosition(darnellPos[0]+100, darnellPos[1], 2.5, FlxEase.quadInOut);
            PlayState.instance.tweenCameraZoom(0.66, 2.5, true, FlxEase.quadInOut);
        });

        // darnell lights up a can
        new FlxTimer().start(cutsceneDelay + 3, function(tmr)
        {
            if (darnellScriptImpl) {
                PlayState.instance.currentStage.getDad().scriptCall('playLightCanAnim');
                // PlayState.instance.currentStage.getDad().playAnimation('lightCan', true);
                PlayState.instance.currentStage.getDad().scriptCall('scheduleLightCanSound', [0.0]);
                // FunkinSound.playOnce(Paths.sound('Darnell_Lighter'), 1.0);
            }
        });

        // pico cocks his gun, camera shifts to his side to show this
        new FlxTimer().start(cutsceneDelay + 4, function(tmr)
        {
            if (picoPlayScriptImpl) {
                PlayState.instance.currentStage.getBoyfriend().scriptCall('playCockGunAnim');
                // PlayState.instance.currentStage.getBoyfriend().playAnimation('cock', true);
                // FunkinSound.playOnce(Paths.sound('Gun_Prep'), 1.0);
            }
            PlayState.instance.tweenCameraToPosition(darnellPos[0]+180, darnellPos[1], 0.4, FlxEase.backOut);
        });

        // darnell kicks the can up
        new FlxTimer().start(cutsceneDelay + 4.4, function(tmr)
        {
            if (darnellScriptImpl) {
                PlayState.instance.currentStage.getDad().scriptCall('playKickCanAnim');
                // PlayState.instance.currentStage.getDad().playAnimation('kickCan', true);
                PlayState.instance.currentStage.getDad().scriptCall('scheduleKickCanSound', [0.0]);
                // FunkinSound.playOnce(Paths.sound('Kick_Can_UP'), 1.0);
            }
            if (!cancelSpraycans) {
                cutsceneCan.animation.play('up');
                cutsceneCan.visible = true;
            }
        });

        // darnell knees the can forward
        new FlxTimer().start(cutsceneDelay + 4.9, function(tmr)
        {
            if (darnellScriptImpl) {
                PlayState.instance.currentStage.getDad().scriptCall('playKneeCanAnim');
                // PlayState.instance.currentStage.getDad().playAnimation('kneeCan', true);
                PlayState.instance.currentStage.getDad().scriptCall('scheduleKneeCanSound', [0.0]);
                // FunkinSound.playOnce(Paths.sound('Kick_Can_FORWARD'), 1.0);
            }
            if (!cancelSpraycans) {
                cutsceneCan.animation.play('forward');
            }
        });

        // pico shoots the can, it explodes
        new FlxTimer().start(cutsceneDelay + 5.1, function(tmr)
        {
            if (picoPlayScriptImpl) {
                PlayState.instance.currentStage.getBoyfriend().scriptCall('playFireGunAnim');
                // FunkinSound.playOnce(Paths.soundRandom('shot', 1, 4));
            }

            PlayState.instance.currentStage.getBoyfriend().playAnimation('intro2', true, true);

            PlayState.instance.tweenCameraToPosition(darnellPos[0]+100, darnellPos[1], 1, FlxEase.quadInOut);

            if (!cancelSpraycans) {
                newCan.scriptCall('playCanShot');
                newCan.visible = true;
                cutsceneCan.visible = false;
            }
            new FlxTimer().start(1/24, function(tmr)
            {
                darkenStageProps();
            });
        });

        // darnell laughs
        new FlxTimer().start(cutsceneDelay + 5.9, function(tmr)
        {
            PlayState.instance.currentStage.getDad().playAnimation('laughCutscene', true);
            FunkinSound.playOnce(Paths.sound(darnellLaughSoundPath), 0.6);
        });

        // nene spits and laughs
        new FlxTimer().start(cutsceneDelay + 6.2, function(tmr)
        {
            PlayState.instance.currentStage.getGirlfriend().playAnimation('laughCutscene', true);
            FunkinSound.playOnce(Paths.sound(neneLaughSoundPath), 0.6);
        });

        // camera returns to normal, cutscene flags set and countdown starts.
        new FlxTimer().start(cutsceneDelay + 8, function(tmr)
        {
            PlayState.instance.tweenCameraZoom(0.77, 2, true, FlxEase.sineInOut);
            PlayState.instance.tweenCameraToPosition(darnellPos[0]+180, darnellPos[1], 2, FlxEase.sineInOut);
            PlayState.instance.isInCutscene = false;
            PlayState.instance.startCountdown();
            cutsceneMusic.stop(); // stop the music!!!!!!
        });
    }

    function onCutsceneBeatHit() {
        // Play idle if Darnell isn't busy.
        if (PlayState.instance.currentStage.getDad().isAnimationFinished() &&
            PlayState.instance.currentStage.getDad().getCurrentAnimation() != 'lightCan')
        {
            PlayState.instance.currentStage.getDad().dance(true);
        }

        if (PlayState.instance.currentStage.getGirlfriend().isAnimationFinished()) {
            PlayState.instance.currentStage.getGirlfriend().dance(true);
        }
    }

    function darkenStageProps() {
        // Darken the background, then fade it back.
        for (stageProp in PlayState.instance.currentStage.members)
        {
            // Determine if the stage prop is something that should be excluded from darkening.
            if (Std.isOfType(stageProp, StageProp)) {
                if (stageProp.name == "bf" || stageProp.name == "dad" || stageProp.name == "gf") // This refers to the player.
                {
                    // Exclude.
                    continue;
                }
            }

            // Hacky way of selecting PicoPlayable.picoFade.
            if (stageProp.zIndex == (PlayState.instance.currentStage.getBoyfriend().zIndex - 3)) {
                // Exclude.
                continue;
            }

            if(stageProp.zIndex > 299) {
                continue;
            }

            // If not excluded, darken.
            stageProp.color = 0xFF111111;
            new FlxTimer().start(1/24, (tmr) ->
            {
                stageProp.color = 0xFF222222;
                FlxTween.color(stageProp, 1.4, 0xFF222222, 0xFFFFFFFF);
            });
        }
    }

    function startVideo() {
        VideoCutscene.play(Paths.videos(cutsceneVideoPath));
    }

    /**
     * Don't replay the cutscene between restarts.
     */
    function onSongRetry(event:ScriptEvent)
    {
        super.onSongRetry(event);

        hasPlayedCutscene = true;
        hasPlayedInGameCutscene = true;
    }

    /**
     * Replay the cutscene after leaving the song.
     */
    function onCreate(event:ScriptEvent):Void
    {
        super.onCreate(event);

        hasPlayedCutscene = false;
        cutsceneVideoPath = 'darnellCutscene';

        hasPlayedInGameCutscene = false;
        inGameCutsceneMusicPath = Paths.music("darnellCanCutscene/darnellCanCutscene", "weekend1");
        inGameCutsceneMusicDataId = 'darnellCanCutscene';
        cutsceneSpraycanImagePath = 'wked1_cutscene_1_can';
        spraycanAtlasClassName = 'SpraycanAtlasSprite';
        cancelSpraycans = false;
        darnellLaughSoundPath = 'cutscene/darnell_laugh';
        neneLaughSoundPath = 'cutscene/nene_laugh';
        switch (PlayState.instance.currentStage.getBoyfriend().characterId) {
            case 'pico-playable':
                picoPlayScriptImpl = true;
            default:
                picoPlayScriptImpl = false;
        }
        switch (PlayState.instance.currentStage.getDad().characterId) {
            case 'darnell':
                darnellScriptImpl = true;
            default:
                darnellScriptImpl = false;
        }
    }

    function onUpdate(event:UpdateScriptEvent) {
        super.onUpdate(event);

        if (cutsceneConductor != null && cutsceneMusic != null) {
            cutsceneConductor.update(cutsceneMusic.time);
        }
    }



    // UNRISTRICTED DIFFICULTIES' FUNCTIONS:

    //--------------------------------------//
    //     DOT TOUCH `injectVariation`!!!   //
    //--------------------------------------//
    /**
     * Tries to injects a new variation into the song.
     * Returns true if the variation was successfully injected,
     * and false if the variation failed to inject. Used by the
     * variation injector when injecting new variations into the
     * different songs according to the provided injection data
     * files, while making sure the sorting is done correctly
     * and the relationship between variations and difficulties
     * is One-to-many.
     * @param vari the variation id to inject.
     * @return Bool
     */
     public function injectVariation(vari:String):Bool {
        // fetch the requested variation's
        // metadata for the song
        var variMeta:Null<SongMetadata> = this.fetchVariationMetadata(this.id, vari);
        // if it doesn't exist, the
        // variation injection failed
        if (variMeta == null) {
            FlxG.log.warn('[SONG] Failed to load variation metadata ('+this.id+':'+vari+'), is the path correct?');
            trace('[SONG]  FAILED to load variation: '+vari);
            // false for failure
            return false;
        }
        // add the new variation
        // metadata to the _metadata map
        this._metadata.set(variMeta.variation, variMeta);
        trace('[SONG]  Loaded variation: '+vari);
        // true for success
        return true;
    }

    //---------------------------------------//
    //    IF YOU EDIT `listDifficulties`,    //
    //    IGNORE `variationIds` PARAMETER    //
    //            AT ALL COSTS!!!            //
    //---------------------------------------//
    /**
     * List all the difficulties in this song.
     *
     * @param variationId Optionally filter by a single variation.
     * @param showLocked Include charts which are not unlocked
     * @param showHidden Include charts which are not accessible to the player.
     *
     * @return The list of difficulties.
     */
    public override function listDifficulties(?variationId:String,
        ?variationIds:Array<String>, showLocked:Bool = false,
        showHidden:Bool = false):Array<String>
    {
        if (showLocked || Save.instance.hasBeatenLevel('weekend1')) {
            // uses the function normally, but while ignoring the variationIds
            // parameter, to prevent freeplay from filtering out variations.
            return super.listDifficulties(variationId,this.variations,showLocked,showHidden);
        }
        // Here I added the check Std.isOfType(FlxG.state, StoryMenuState)
        // In order for the base game weekend1 to always show up on story mode.
        if (Std.isOfType(FlxG.state, StoryMenuState)) {
            return super.listDifficulties('default');
        }
        // Hide all difficulties if the player has not beaten the week.
        return [];
    }

    //---------------------------------------//
    //      IF YOU EDIT `getDifficulty`      //
    //     IGNORE `variations` PARAMETER     //
    //            AT ALL COSTS!!!            //
    //---------------------------------------//
    /**
     * Retrieve the metadata for a specific difficulty, including the chart if it is loaded.
     * @param diffId The difficulty ID, such as `easy` or `hard`.
     * @param variation The variation ID to fetch the difficulty for.
     * @return The difficulty data.
     */
    public override function getDifficulty(?diffId:String,
        ?variation:String, ?variations:Array<String>):Null<SongDifficulty>
    {
        // if diffId is null, try to get the
        // first difficulty available in the song,
        // with priority to the provided variation
        // if it was provided.
        if (diffId == null && variation != null) {diffId = listDifficulties(variation)[0];}
        if (diffId == null) {diffId = listDifficulties()[0];}
        // if diffId is still null after this point, there
        // are no difficulties in this song at all.
        if (diffId == null) {return null;}

        // Try to get the first valid variation to the
        // difficulty and replace it with the provided
        // variation if no variation was actually provided.
        tryVariationId = this.getFirstValidVariation(diffId);
        if (variation == null) {variation = tryVariationId;}
        // If there's no first valid variation to the
        // difficulty, the difficulty doesn't exist in the song.
        if (tryVariationId == null) {return  null;}

        // create the suffix for this difficulty in the difficulties map
        var variationSuffix = (variation != Constants.DEFAULT_VARIATION) ? '-'+variation : '';

        // if the difficulty exists in
        // the difficulties map, return it
        if (difficulties.exists(diffId+variationSuffix)) {
            return difficulties.get(diffId+variationSuffix);
        }
        // otherwise, attempt to find the difficulty with
        // the first valid variation, and only if that doesn't
        // work, return null.
        return (variation == tryVariationId ? null : this.getDifficulty(diffId));
    }

    //-------------------------------------------//
    //   IF YOU EDIT `getFirstValidVariation`,   //
    //   IGNORE `possibleVariations` PARAMETER   //
    //              AT ALL COSTS!!!              //
    //-------------------------------------------//
    public override function getFirstValidVariation(?diffId:String,
        ?possibleVariations:Array<String>):Null<String>
    {
	    // uses the function normally, but while
        // ignoring the possibleVariations parameter,
        // to prevent freeplay from filtering out variations
        return super.getFirstValidVariation(diffId);
    }

    //---------------------------------------//
    //      IF YOU EDIT `hasDifficulty`      //
    //    IGNORE `variationIds` PARAMETER    //
    //            AT ALL COSTS!!!            //
    //---------------------------------------//
    public override function hasDifficulty(diffId:String,
        ?variationId:String, ?variationIds:Array<String>):Bool
    {
        // if diffId is null, try to get the
        // first difficulty available in the song,
        // with priority to the provided variation
        // if it was provided.
        if (diffId == null && variationId != null) {diffId = listDifficulties(variationId)[0];}
        if (diffId == null) {diffId = listDifficulties()[0];}
        // if diffId is still null after this point,
        // there are no difficulties in this song at all.
        if (diffId == null) {return false;}

        // Try to get the first valid variation to the
        // difficulty and replace it with the provided
        // variation if no variation was actually provided.
        tryVariationId = this.getFirstValidVariation(diffId);
        if (variationId == null) {variationId = tryVariationId;}
        // If there's no first valid variation to the
        // difficulty, the difficulty doesn't exist in the song.
        if (tryVariationId == null) {return false;}

        // create the suffix for this difficulty in the difficulties map
        var variationSuffix = (variationId != Constants.DEFAULT_VARIATION) ? '-'+variationId : '';

        // if the difficulty exists in
        // the difficulties map, return true
        if (this.difficulties.exists(diffId+variationSuffix)) {
            return true;
        }
        // otherwise, attempt to find the difficulty with
        // the first valid variation, and only if that doesn't
        // work, return false.
        return (variationId == tryVariationId ? false : this.hasDifficulty(diffId));

        // like getDifficulty, but returns a boolean for if the
        // difficulty exists in the song or not. This function
        // is currently (FNF 0.3.3) unused and deprecated by UD
        // in favor of getDifficulty (checks for null), but it's
        // still being maintained here in case it gets reused in
        // a future update to FNF.
    }
}
