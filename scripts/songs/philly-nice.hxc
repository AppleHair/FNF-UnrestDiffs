// Import what ever you want here:





// DON'T REMOVE THESE IMPORTS!!!
import flixel.FlxG;

import funkin.play.song.Song;
import funkin.data.song.SongMetadata;
import funkin.play.song.SongDifficulty;
import funkin.util.tools.ArrayTools;
import funkin.util.Constants;

// fill your class name
class PhillyNiceSong extends Song {

    public function new(songId:String) {
        // trace("[SONG] - Called init");
        // trace(songId);

        // fill your song id
        super("philly-nice");
        // do what ever you want here:
        // (IGNORE `songId` PARAMETER!!)




        //   VARIATION INJECTION DOT TOUCH!!!   //
        if (songId != "unknown") {
            // trace("[SONG] - Receved variations");
            var varis = songId.substr(1,songId.length-2).split(',');
            // trace(varis);
            var res = this.injectVariants(varis);
            if (!res) {return null;}
        }
    }

    // do what ever you want here:





    //-------------------------------------//
    //    DOT TOUCH `injectVariants`!!!    //
    //-------------------------------------//

    public function injectVariants(varis:Array<String>):Bool {
        for (vari in varis) {
            var variMeta:Null<SongMetadata> = this.fetchVariationMetadata(this.id, vari);
            if (variMeta == null) {
                FlxG.log.warn('[SONG] Failed to load variation metadata ('+this.id+':'+vari+'), is the path correct?');
                trace('[SONG]  FAILED to load variation: '+vari);
                return false;
            }
            this._metadata.set(variMeta.variation, variMeta);
            trace('[SONG]  Loaded variation: '+vari);
        }
        this.populateDifficulties();
        return true;
    }

    //---------------------------------------//
    //    IF YOU EDIT `listDifficulties`,    //
    //    IGNORE `variationIds` PARAMETER    //
    //            AT ALL COSTS!!!            //
    //---------------------------------------//

    public override function listDifficulties(?variationId:String,
        ?variationIds:Array<String>, showLocked:Bool = false,
        showHidden:Bool = false):Array<String>
    {
        return super.listDifficulties(variationId,this.variations,showLocked,showHidden);
    }

    //---------------------------------------//
    //      IF YOU EDIT `getDifficulty`      //
    //     IGNORE `variations` PARAMETER     //
    //            AT ALL COSTS!!!            //
    //---------------------------------------//

    public override function getDifficulty(?diffId:String, ?variation:String,
        ?variations:Array<String>):Null<SongDifficulty>
    {
        if (diffId == null) {diffId = listDifficulties(variation)[0];}
        tryVariationId = this.getFirstValidVariation(diffId);
        if (tryVariationId == null) {return  null;}
        if (variation == null) {variation = tryVariationId;}

        var variationSuffix = (variation != Constants.DEFAULT_VARIATION) ? '-'+variation : '';

        if (difficulties.exists(diffId+variationSuffix)) {
            return difficulties.get(diffId+variationSuffix);
        }
        return (variation == tryVariationId ? null : this.getDifficulty(diffId));
    }

    //-------------------------------------------//
    //   IF YOU EDIT `getFirstValidVariation`,   //
    //   IGNORE `possibleVariations` PARAMETER   //
    //              AT ALL COSTS!!!              //
    //-------------------------------------------//

    public override function getFirstValidVariation(?diffId:String,
        ?possibleVariations:Array<String>):Null<String>
    {
        return super.getFirstValidVariation(diffId);
    }

    //---------------------------------------//
    //      IF YOU EDIT `hasDifficulty`      //
    //    IGNORE `variationIds` PARAMETER    //
    //            AT ALL COSTS!!!            //

    // (NOTE: This function is unused in the //
    //  game's code on 0.3.2, but it might   //
    //  get reused in the future)            //
    //---------------------------------------//

    public override function hasDifficulty(diffId:String,
        ?variationId:String, ?variationIds:Array<String>):Bool
    {
        tryVariationId = this.getFirstValidVariation(diffId);
        if (tryVariationId == null) {return false;}
        if (variationId == null) {variationId = tryVariationId;}

        variationIds = null;

        var variationSuffix = (variationId != Constants.DEFAULT_VARIATION) ? '-'+variationId : '';
        return this.difficulties.exists(diffId+variationSuffix);
    }
}
