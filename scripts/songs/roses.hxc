import flixel.FlxG;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import funkin.audio.FunkinSound;
import funkin.graphics.FunkinSprite;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.Song;
import funkin.Preferences;

class RosesSong extends Song {
    // Set these on onCountDownStart through
    // a module to override default behavior
    public var hasPlayedCutscene:Bool = false;
    public var conversationId:String = 'roses';
    public var conversationCensoredId:String = 'roses-censored';
    public var angrySoundPath:String = 'ANGRY';
    public var redFadeColor:Int = 0xFFFF1B31;
    public var redFadeBeat:Int = 180;// 180 for default, 207 for erect
    public var doRedFade:Bool = false;// Gets set to true automatically if the variation is default or erect

    function new() {
        super("roses");
    }

    public override function onCountdownStart(event:CountdownScriptEvent):Void {
        super.onCountdownStart(event);
        trace('Started countdown for Roses...');

        if (!PlayStatePlaylist.isStoryMode) hasPlayedCutscene = true;

        if (!hasPlayedCutscene) {
            trace('Pausing countdown to play cutscene.');

            hasPlayedCutscene = true;

            event.cancel(); // CANCEL THE COUNTDOWN!

            // Play a SFX
            FunkinSound.playOnce(Paths.sound(angrySoundPath), 1.0);

            PlayState.instance.currentStage.pause();

            startDialogue();
        }
    }

    function startDialogue() {
        if (Preferences.naughtyness) {
            trace('Playing uncensored dialogue...');
            PlayState.instance.startConversation(conversationId);
        } else {
            trace('Playing censored dialogue...');
            PlayState.instance.startConversation(conversationCensoredId);
        }
    }

    /**
     * Don't replay the cutscene between restarts.
     */
    function onSongRetry(event:ScriptEvent) {
        super.onSongRetry(event);

        hasPlayedCutscene = true;
    }

    /**
     * Replay the cutscene after leaving the song.
     */
    function onCreate(event:ScriptEvent):Void {
        super.onCreate(event);

        hasPlayedCutscene = false;
        redFadeColor = 0xFFFF1B31;
        conversationId = 'roses';
        conversationCensoredId = 'roses-censored';
        angrySoundPath = 'ANGRY';
        switch (PlayState.instance.currentVariation) {
            case "default":
            redFadeBeat = 180;
            doRedFade = true;
            case "erect":
            redFadeBeat = 207;
            doRedFade = true;
            default:
            doRedFade = false;
        }
    }

    function onBeatHit(event:SongTimeScriptEvent) {
        // When overriding onBeatHit, make sure to call super.onBeatHit,
        // otherwise boppers will not work.
        super.onBeatHit(event);

        if (event.beat == this.redFadeBeat && this.doRedFade && PlayStatePlaylist.isStoryMode) {
            trace('Hit end of song! Starting outro.');

            PlayState.instance.camCutscene.visible = true;

            var red = new FunkinSprite(-20, -20).makeSolidColor(FlxG.width * 1.5, FlxG.height * 1.5, redFadeColor);
            red.cameras = [PlayState.instance.camCutscene];

            red.alpha = 0.0;
            FlxTween.tween(PlayState.instance.camHUD, {alpha: 0.0}, 1.5, {ease: FlxEase.linear});
            FlxTween.tween(red, {alpha: 1.0}, 2.0, {ease: FlxEase.linear});
            PlayState.instance.add(red);
        }
    }

    public override function onDialogueEnd() {
        // We may need to wait for the outro to play.
        Countdown.performCountdown();
    }
}